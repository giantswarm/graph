// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"github.com/giantswarm/graph/ent/githubissue"
	"github.com/giantswarm/graph/ent/githubuser"
	"github.com/giantswarm/graph/ent/person"
)

// GitHubUserCreate is the builder for creating a GitHubUser entity.
type GitHubUserCreate struct {
	config
	mutation *GitHubUserMutation
	hooks    []Hook
}

// SetGithubID sets the "github_id" field.
func (ghuc *GitHubUserCreate) SetGithubID(i int) *GitHubUserCreate {
	ghuc.mutation.SetGithubID(i)
	return ghuc
}

// SetLogin sets the "login" field.
func (ghuc *GitHubUserCreate) SetLogin(s string) *GitHubUserCreate {
	ghuc.mutation.SetLogin(s)
	return ghuc
}

// SetEmail sets the "email" field.
func (ghuc *GitHubUserCreate) SetEmail(s string) *GitHubUserCreate {
	ghuc.mutation.SetEmail(s)
	return ghuc
}

// SetName sets the "name" field.
func (ghuc *GitHubUserCreate) SetName(s string) *GitHubUserCreate {
	ghuc.mutation.SetName(s)
	return ghuc
}

// AddCreatedIssueIDs adds the "created_issues" edge to the GitHubIssue entity by IDs.
func (ghuc *GitHubUserCreate) AddCreatedIssueIDs(ids ...int) *GitHubUserCreate {
	ghuc.mutation.AddCreatedIssueIDs(ids...)
	return ghuc
}

// AddCreatedIssues adds the "created_issues" edges to the GitHubIssue entity.
func (ghuc *GitHubUserCreate) AddCreatedIssues(g ...*GitHubIssue) *GitHubUserCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ghuc.AddCreatedIssueIDs(ids...)
}

// AddClosedIssueIDs adds the "closed_issues" edge to the GitHubIssue entity by IDs.
func (ghuc *GitHubUserCreate) AddClosedIssueIDs(ids ...int) *GitHubUserCreate {
	ghuc.mutation.AddClosedIssueIDs(ids...)
	return ghuc
}

// AddClosedIssues adds the "closed_issues" edges to the GitHubIssue entity.
func (ghuc *GitHubUserCreate) AddClosedIssues(g ...*GitHubIssue) *GitHubUserCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ghuc.AddClosedIssueIDs(ids...)
}

// SetPersonID sets the "person" edge to the Person entity by ID.
func (ghuc *GitHubUserCreate) SetPersonID(id int) *GitHubUserCreate {
	ghuc.mutation.SetPersonID(id)
	return ghuc
}

// SetNillablePersonID sets the "person" edge to the Person entity by ID if the given value is not nil.
func (ghuc *GitHubUserCreate) SetNillablePersonID(id *int) *GitHubUserCreate {
	if id != nil {
		ghuc = ghuc.SetPersonID(*id)
	}
	return ghuc
}

// SetPerson sets the "person" edge to the Person entity.
func (ghuc *GitHubUserCreate) SetPerson(p *Person) *GitHubUserCreate {
	return ghuc.SetPersonID(p.ID)
}

// AddAssignedIssueIDs adds the "assigned_issues" edge to the GitHubIssue entity by IDs.
func (ghuc *GitHubUserCreate) AddAssignedIssueIDs(ids ...int) *GitHubUserCreate {
	ghuc.mutation.AddAssignedIssueIDs(ids...)
	return ghuc
}

// AddAssignedIssues adds the "assigned_issues" edges to the GitHubIssue entity.
func (ghuc *GitHubUserCreate) AddAssignedIssues(g ...*GitHubIssue) *GitHubUserCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ghuc.AddAssignedIssueIDs(ids...)
}

// Mutation returns the GitHubUserMutation object of the builder.
func (ghuc *GitHubUserCreate) Mutation() *GitHubUserMutation {
	return ghuc.mutation
}

// Save creates the GitHubUser in the database.
func (ghuc *GitHubUserCreate) Save(ctx context.Context) (*GitHubUser, error) {
	var (
		err  error
		node *GitHubUser
	)
	if len(ghuc.hooks) == 0 {
		if err = ghuc.check(); err != nil {
			return nil, err
		}
		node, err = ghuc.gremlinSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GitHubUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ghuc.check(); err != nil {
				return nil, err
			}
			ghuc.mutation = mutation
			if node, err = ghuc.gremlinSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ghuc.hooks) - 1; i >= 0; i-- {
			if ghuc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ghuc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ghuc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ghuc *GitHubUserCreate) SaveX(ctx context.Context) *GitHubUser {
	v, err := ghuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ghuc *GitHubUserCreate) Exec(ctx context.Context) error {
	_, err := ghuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ghuc *GitHubUserCreate) ExecX(ctx context.Context) {
	if err := ghuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ghuc *GitHubUserCreate) check() error {
	if _, ok := ghuc.mutation.GithubID(); !ok {
		return &ValidationError{Name: "github_id", err: errors.New(`ent: missing required field "github_id"`)}
	}
	if v, ok := ghuc.mutation.GithubID(); ok {
		if err := githubuser.GithubIDValidator(v); err != nil {
			return &ValidationError{Name: "github_id", err: fmt.Errorf(`ent: validator failed for field "github_id": %w`, err)}
		}
	}
	if _, ok := ghuc.mutation.Login(); !ok {
		return &ValidationError{Name: "login", err: errors.New(`ent: missing required field "login"`)}
	}
	if _, ok := ghuc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "email"`)}
	}
	if _, ok := ghuc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	return nil
}

func (ghuc *GitHubUserCreate) gremlinSave(ctx context.Context) (*GitHubUser, error) {
	res := &gremlin.Response{}
	query, bindings := ghuc.gremlin().Query()
	if err := ghuc.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	ghu := &GitHubUser{config: ghuc.config}
	if err := ghu.FromResponse(res); err != nil {
		return nil, err
	}
	return ghu, nil
}

func (ghuc *GitHubUserCreate) gremlin() *dsl.Traversal {
	type constraint struct {
		firstQueryPred *dsl.Traversal // constraint predicate.
		pred           *dsl.Traversal // constraint predicate.
		test           *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 6)
	createTraversal := func(constraints []*constraint, traversalFuncs []func(*dsl.Traversal)) *dsl.Traversal {
		var v *dsl.Traversal
		if len(constraints) > 0 {
			// We will use coalesce, therefore AddV will be child traversal, so we need __ here
			v = __.New().AddV(githubuser.Label)
		} else {
			v = g.AddV(githubuser.Label)
		}
		for _, tf := range traversalFuncs {
			tf(v)
		}
		return v
	}
	traversalFuncs := []func(*dsl.Traversal){}
	if value, ok := ghuc.mutation.GithubID(); ok {
		constraints = append(constraints, &constraint{
			firstQueryPred: g.V().Has(githubuser.Label, githubuser.FieldGithubID, value).Count(),
			pred:           __.V().Has(githubuser.Label, githubuser.FieldGithubID, value).Count(),
			test:           __.Is(p.NEQ(0)).Constant(NewErrUniqueField(githubuser.Label, githubuser.FieldGithubID, value)),
		})
		traversalFuncs = append(traversalFuncs, func(v *dsl.Traversal) {
			v.Property(dsl.Single, githubuser.FieldGithubID, value)
		})
	}
	if value, ok := ghuc.mutation.Login(); ok {
		constraints = append(constraints, &constraint{
			firstQueryPred: g.V().Has(githubuser.Label, githubuser.FieldLogin, value).Count(),
			pred:           __.V().Has(githubuser.Label, githubuser.FieldLogin, value).Count(),
			test:           __.Is(p.NEQ(0)).Constant(NewErrUniqueField(githubuser.Label, githubuser.FieldLogin, value)),
		})
		traversalFuncs = append(traversalFuncs, func(v *dsl.Traversal) {
			v.Property(dsl.Single, githubuser.FieldLogin, value)
		})
	}
	if value, ok := ghuc.mutation.Email(); ok {
		constraints = append(constraints, &constraint{
			firstQueryPred: g.V().Has(githubuser.Label, githubuser.FieldEmail, value).Count(),
			pred:           __.V().Has(githubuser.Label, githubuser.FieldEmail, value).Count(),
			test:           __.Is(p.NEQ(0)).Constant(NewErrUniqueField(githubuser.Label, githubuser.FieldEmail, value)),
		})
		traversalFuncs = append(traversalFuncs, func(v *dsl.Traversal) {
			v.Property(dsl.Single, githubuser.FieldEmail, value)
		})
	}
	if value, ok := ghuc.mutation.Name(); ok {
		traversalFuncs = append(traversalFuncs, func(v *dsl.Traversal) {
			v.Property(dsl.Single, githubuser.FieldName, value)
		})
	}
	for _, id := range ghuc.mutation.CreatedIssuesIDs() {
		traversalFuncs = append(traversalFuncs, func(v *dsl.Traversal) {
			v.AddE(githubuser.CreatedIssuesLabel).To(g.V(id)).OutV()
		})
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(githubuser.CreatedIssuesLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(githubuser.Label, githubuser.CreatedIssuesLabel, string(id))),
		})
	}
	for _, id := range ghuc.mutation.ClosedIssuesIDs() {
		traversalFuncs = append(traversalFuncs, func(v *dsl.Traversal) {
			v.AddE(githubuser.ClosedIssuesLabel).To(g.V(id)).OutV()
		})
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(githubuser.ClosedIssuesLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(githubuser.Label, githubuser.ClosedIssuesLabel, string(id))),
		})
	}
	for _, id := range ghuc.mutation.PersonIDs() {
		traversalFuncs = append(traversalFuncs, func(v *dsl.Traversal) {
			v.AddE(person.GithubAccountLabel).From(g.V(id)).InV()
		})
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(person.GithubAccountLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(githubuser.Label, person.GithubAccountLabel, string(id))),
		})
	}
	for _, id := range ghuc.mutation.AssignedIssuesIDs() {
		traversalFuncs = append(traversalFuncs, func(v *dsl.Traversal) {
			v.AddE(githubissue.AssigneesLabel).From(g.V(id)).InV()
		})
	}
	v := createTraversal(constraints, traversalFuncs)
	if len(constraints) == 0 {
		return v.ValueMap(true)
	}
	var tr *dsl.Traversal
	if len(constraints) == 1 {
		// use the TraversalSource (g) to start the traversal
		tr = constraints[0].firstQueryPred.Coalesce(constraints[0].test, v.ValueMap(true))
	} else {
		// use the __ class rather than a TraversalSource to construct the child traversal anonymously
		tr = constraints[0].pred.Coalesce(constraints[0].test, v.ValueMap(true))
	}
	for i, cr := range constraints[1:] {
		if i == len(constraints[1:])-1 && cr.firstQueryPred != nil {
			// use the TraversalSource (g) to start the traversal
			tr = cr.firstQueryPred.Coalesce(cr.test, tr)
		} else {
			// use the __ class rather than a TraversalSource to construct the child traversal anonymously
			tr = cr.pred.Coalesce(cr.test, tr)
		}
	}
	return tr
}

// GitHubUserCreateBulk is the builder for creating many GitHubUser entities in bulk.
type GitHubUserCreateBulk struct {
	config
	builders []*GitHubUserCreate
}

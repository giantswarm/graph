// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"github.com/giantswarm/graph/ent/githubuser"
)

// GitHubUserCreate is the builder for creating a GitHubUser entity.
type GitHubUserCreate struct {
	config
	mutation *GitHubUserMutation
	hooks    []Hook
}

// SetLogin sets the "login" field.
func (ghuc *GitHubUserCreate) SetLogin(s string) *GitHubUserCreate {
	ghuc.mutation.SetLogin(s)
	return ghuc
}

// SetEmail sets the "email" field.
func (ghuc *GitHubUserCreate) SetEmail(s string) *GitHubUserCreate {
	ghuc.mutation.SetEmail(s)
	return ghuc
}

// SetName sets the "name" field.
func (ghuc *GitHubUserCreate) SetName(s string) *GitHubUserCreate {
	ghuc.mutation.SetName(s)
	return ghuc
}

// Mutation returns the GitHubUserMutation object of the builder.
func (ghuc *GitHubUserCreate) Mutation() *GitHubUserMutation {
	return ghuc.mutation
}

// Save creates the GitHubUser in the database.
func (ghuc *GitHubUserCreate) Save(ctx context.Context) (*GitHubUser, error) {
	var (
		err  error
		node *GitHubUser
	)
	if len(ghuc.hooks) == 0 {
		if err = ghuc.check(); err != nil {
			return nil, err
		}
		node, err = ghuc.gremlinSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GitHubUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ghuc.check(); err != nil {
				return nil, err
			}
			ghuc.mutation = mutation
			if node, err = ghuc.gremlinSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ghuc.hooks) - 1; i >= 0; i-- {
			if ghuc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ghuc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ghuc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ghuc *GitHubUserCreate) SaveX(ctx context.Context) *GitHubUser {
	v, err := ghuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ghuc *GitHubUserCreate) Exec(ctx context.Context) error {
	_, err := ghuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ghuc *GitHubUserCreate) ExecX(ctx context.Context) {
	if err := ghuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ghuc *GitHubUserCreate) check() error {
	if _, ok := ghuc.mutation.Login(); !ok {
		return &ValidationError{Name: "login", err: errors.New(`ent: missing required field "login"`)}
	}
	if _, ok := ghuc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "email"`)}
	}
	if _, ok := ghuc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	return nil
}

func (ghuc *GitHubUserCreate) gremlinSave(ctx context.Context) (*GitHubUser, error) {
	res := &gremlin.Response{}
	query, bindings := ghuc.gremlin().Query()
	if err := ghuc.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	ghu := &GitHubUser{config: ghuc.config}
	if err := ghu.FromResponse(res); err != nil {
		return nil, err
	}
	return ghu, nil
}

func (ghuc *GitHubUserCreate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 2)
	v := g.AddV(githubuser.Label)
	if value, ok := ghuc.mutation.Login(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(githubuser.Label, githubuser.FieldLogin, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(githubuser.Label, githubuser.FieldLogin, value)),
		})
		v.Property(dsl.Single, githubuser.FieldLogin, value)
	}
	if value, ok := ghuc.mutation.Email(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(githubuser.Label, githubuser.FieldEmail, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(githubuser.Label, githubuser.FieldEmail, value)),
		})
		v.Property(dsl.Single, githubuser.FieldEmail, value)
	}
	if value, ok := ghuc.mutation.Name(); ok {
		v.Property(dsl.Single, githubuser.FieldName, value)
	}
	if len(constraints) == 0 {
		return v.ValueMap(true)
	}
	tr := constraints[0].pred.Coalesce(constraints[0].test, v.ValueMap(true))
	for _, cr := range constraints[1:] {
		tr = cr.pred.Coalesce(cr.test, tr)
	}
	return tr
}

// GitHubUserCreateBulk is the builder for creating many GitHubUser entities in bulk.
type GitHubUserCreateBulk struct {
	config
	builders []*GitHubUserCreate
}

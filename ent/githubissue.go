// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/gremlin"
	"github.com/giantswarm/graph/ent/githubissue"
	"github.com/giantswarm/graph/ent/githubuser"
)

// GitHubIssue is the model entity for the GitHubIssue schema.
type GitHubIssue struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// GithubID holds the value of the "github_id" field.
	GithubID int `json:"github_id,omitempty"`
	// Number holds the value of the "number" field.
	Number int `json:"number,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// HTMLURL holds the value of the "html_url" field.
	HTMLURL string `json:"html_url,omitempty"`
	// State holds the value of the "state" field.
	State githubissue.State `json:"state,omitempty"`
	// Locked holds the value of the "locked" field.
	Locked bool `json:"locked,omitempty"`
	// ActiveLockReason holds the value of the "active_lock_reason" field.
	ActiveLockReason string `json:"active_lock_reason,omitempty"`
	// CommentsCount holds the value of the "comments_count" field.
	CommentsCount int `json:"comments_count,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt string `json:"updated_at,omitempty"`
	// ClosedAt holds the value of the "closed_at" field.
	ClosedAt string `json:"closed_at,omitempty"`
	// AuthorAssociation holds the value of the "author_association" field.
	AuthorAssociation string `json:"author_association,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GitHubIssueQuery when eager-loading is set.
	Edges GitHubIssueEdges `json:"edges"`
}

// GitHubIssueEdges holds the relations/edges for other nodes in the graph.
type GitHubIssueEdges struct {
	// Assignees holds the value of the assignees edge.
	Assignees []*GitHubUser `json:"assignees,omitempty"`
	// Author holds the value of the author edge.
	Author *GitHubUser `json:"author,omitempty"`
	// ClosedBy holds the value of the closed_by edge.
	ClosedBy *GitHubUser `json:"closed_by,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// AssigneesOrErr returns the Assignees value or an error if the edge
// was not loaded in eager-loading.
func (e GitHubIssueEdges) AssigneesOrErr() ([]*GitHubUser, error) {
	if e.loadedTypes[0] {
		return e.Assignees, nil
	}
	return nil, &NotLoadedError{edge: "assignees"}
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GitHubIssueEdges) AuthorOrErr() (*GitHubUser, error) {
	if e.loadedTypes[1] {
		if e.Author == nil {
			// The edge author was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: githubuser.Label}
		}
		return e.Author, nil
	}
	return nil, &NotLoadedError{edge: "author"}
}

// ClosedByOrErr returns the ClosedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GitHubIssueEdges) ClosedByOrErr() (*GitHubUser, error) {
	if e.loadedTypes[2] {
		if e.ClosedBy == nil {
			// The edge closed_by was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: githubuser.Label}
		}
		return e.ClosedBy, nil
	}
	return nil, &NotLoadedError{edge: "closed_by"}
}

// FromResponse scans the gremlin response data into GitHubIssue.
func (ghi *GitHubIssue) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanghi struct {
		ID                string            `json:"id,omitempty"`
		GithubID          int               `json:"github_id,omitempty"`
		Number            int               `json:"number,omitempty"`
		Title             string            `json:"title,omitempty"`
		Body              string            `json:"body,omitempty"`
		HTMLURL           string            `json:"html_url,omitempty"`
		State             githubissue.State `json:"state,omitempty"`
		Locked            bool              `json:"locked,omitempty"`
		ActiveLockReason  string            `json:"active_lock_reason,omitempty"`
		CommentsCount     int               `json:"comments_count,omitempty"`
		CreatedAt         string            `json:"created_at,omitempty"`
		UpdatedAt         string            `json:"updated_at,omitempty"`
		ClosedAt          string            `json:"closed_at,omitempty"`
		AuthorAssociation string            `json:"author_association,omitempty"`
	}
	if err := vmap.Decode(&scanghi); err != nil {
		return err
	}
	ghi.ID = scanghi.ID
	ghi.GithubID = scanghi.GithubID
	ghi.Number = scanghi.Number
	ghi.Title = scanghi.Title
	ghi.Body = scanghi.Body
	ghi.HTMLURL = scanghi.HTMLURL
	ghi.State = scanghi.State
	ghi.Locked = scanghi.Locked
	ghi.ActiveLockReason = scanghi.ActiveLockReason
	ghi.CommentsCount = scanghi.CommentsCount
	ghi.CreatedAt = scanghi.CreatedAt
	ghi.UpdatedAt = scanghi.UpdatedAt
	ghi.ClosedAt = scanghi.ClosedAt
	ghi.AuthorAssociation = scanghi.AuthorAssociation
	return nil
}

// QueryAssignees queries the "assignees" edge of the GitHubIssue entity.
func (ghi *GitHubIssue) QueryAssignees() *GitHubUserQuery {
	return (&GitHubIssueClient{config: ghi.config}).QueryAssignees(ghi)
}

// QueryAuthor queries the "author" edge of the GitHubIssue entity.
func (ghi *GitHubIssue) QueryAuthor() *GitHubUserQuery {
	return (&GitHubIssueClient{config: ghi.config}).QueryAuthor(ghi)
}

// QueryClosedBy queries the "closed_by" edge of the GitHubIssue entity.
func (ghi *GitHubIssue) QueryClosedBy() *GitHubUserQuery {
	return (&GitHubIssueClient{config: ghi.config}).QueryClosedBy(ghi)
}

// Update returns a builder for updating this GitHubIssue.
// Note that you need to call GitHubIssue.Unwrap() before calling this method if this GitHubIssue
// was returned from a transaction, and the transaction was committed or rolled back.
func (ghi *GitHubIssue) Update() *GitHubIssueUpdateOne {
	return (&GitHubIssueClient{config: ghi.config}).UpdateOne(ghi)
}

// Unwrap unwraps the GitHubIssue entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ghi *GitHubIssue) Unwrap() *GitHubIssue {
	tx, ok := ghi.config.driver.(*txDriver)
	if !ok {
		panic("ent: GitHubIssue is not a transactional entity")
	}
	ghi.config.driver = tx.drv
	return ghi
}

// String implements the fmt.Stringer.
func (ghi *GitHubIssue) String() string {
	var builder strings.Builder
	builder.WriteString("GitHubIssue(")
	builder.WriteString(fmt.Sprintf("id=%v", ghi.ID))
	builder.WriteString(", github_id=")
	builder.WriteString(fmt.Sprintf("%v", ghi.GithubID))
	builder.WriteString(", number=")
	builder.WriteString(fmt.Sprintf("%v", ghi.Number))
	builder.WriteString(", title=")
	builder.WriteString(ghi.Title)
	builder.WriteString(", body=")
	builder.WriteString(ghi.Body)
	builder.WriteString(", html_url=")
	builder.WriteString(ghi.HTMLURL)
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", ghi.State))
	builder.WriteString(", locked=")
	builder.WriteString(fmt.Sprintf("%v", ghi.Locked))
	builder.WriteString(", active_lock_reason=")
	builder.WriteString(ghi.ActiveLockReason)
	builder.WriteString(", comments_count=")
	builder.WriteString(fmt.Sprintf("%v", ghi.CommentsCount))
	builder.WriteString(", created_at=")
	builder.WriteString(ghi.CreatedAt)
	builder.WriteString(", updated_at=")
	builder.WriteString(ghi.UpdatedAt)
	builder.WriteString(", closed_at=")
	builder.WriteString(ghi.ClosedAt)
	builder.WriteString(", author_association=")
	builder.WriteString(ghi.AuthorAssociation)
	builder.WriteByte(')')
	return builder.String()
}

// GitHubIssues is a parsable slice of GitHubIssue.
type GitHubIssues []*GitHubIssue

// FromResponse scans the gremlin response data into GitHubIssues.
func (ghi *GitHubIssues) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanghi []struct {
		ID                string            `json:"id,omitempty"`
		GithubID          int               `json:"github_id,omitempty"`
		Number            int               `json:"number,omitempty"`
		Title             string            `json:"title,omitempty"`
		Body              string            `json:"body,omitempty"`
		HTMLURL           string            `json:"html_url,omitempty"`
		State             githubissue.State `json:"state,omitempty"`
		Locked            bool              `json:"locked,omitempty"`
		ActiveLockReason  string            `json:"active_lock_reason,omitempty"`
		CommentsCount     int               `json:"comments_count,omitempty"`
		CreatedAt         string            `json:"created_at,omitempty"`
		UpdatedAt         string            `json:"updated_at,omitempty"`
		ClosedAt          string            `json:"closed_at,omitempty"`
		AuthorAssociation string            `json:"author_association,omitempty"`
	}
	if err := vmap.Decode(&scanghi); err != nil {
		return err
	}
	for _, v := range scanghi {
		*ghi = append(*ghi, &GitHubIssue{
			ID:                v.ID,
			GithubID:          v.GithubID,
			Number:            v.Number,
			Title:             v.Title,
			Body:              v.Body,
			HTMLURL:           v.HTMLURL,
			State:             v.State,
			Locked:            v.Locked,
			ActiveLockReason:  v.ActiveLockReason,
			CommentsCount:     v.CommentsCount,
			CreatedAt:         v.CreatedAt,
			UpdatedAt:         v.UpdatedAt,
			ClosedAt:          v.ClosedAt,
			AuthorAssociation: v.AuthorAssociation,
		})
	}
	return nil
}

func (ghi GitHubIssues) config(cfg config) {
	for _i := range ghi {
		ghi[_i].config = cfg
	}
}

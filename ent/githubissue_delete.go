// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/giantswarm/graph/ent/githubissue"
	"github.com/giantswarm/graph/ent/predicate"
)

// GitHubIssueDelete is the builder for deleting a GitHubIssue entity.
type GitHubIssueDelete struct {
	config
	hooks    []Hook
	mutation *GitHubIssueMutation
}

// Where appends a list predicates to the GitHubIssueDelete builder.
func (ghid *GitHubIssueDelete) Where(ps ...predicate.GitHubIssue) *GitHubIssueDelete {
	ghid.mutation.Where(ps...)
	return ghid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ghid *GitHubIssueDelete) Exec(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ghid.hooks) == 0 {
		affected, err = ghid.gremlinExec(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GitHubIssueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ghid.mutation = mutation
			affected, err = ghid.gremlinExec(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ghid.hooks) - 1; i >= 0; i-- {
			if ghid.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ghid.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ghid.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// ExecX is like Exec, but panics if an error occurs.
func (ghid *GitHubIssueDelete) ExecX(ctx context.Context) int {
	n, err := ghid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ghid *GitHubIssueDelete) gremlinExec(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := ghid.gremlin().Query()
	if err := ghid.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	return res.ReadInt()
}

func (ghid *GitHubIssueDelete) gremlin() *dsl.Traversal {
	t := g.V().HasLabel(githubissue.Label)
	for _, p := range ghid.mutation.predicates {
		p(t)
	}
	return t.SideEffect(__.Drop()).Count()
}

// GitHubIssueDeleteOne is the builder for deleting a single GitHubIssue entity.
type GitHubIssueDeleteOne struct {
	ghid *GitHubIssueDelete
}

// Exec executes the deletion query.
func (ghido *GitHubIssueDeleteOne) Exec(ctx context.Context) error {
	n, err := ghido.ghid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{githubissue.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ghido *GitHubIssueDeleteOne) ExecX(ctx context.Context) {
	ghido.ghid.ExecX(ctx)
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"github.com/giantswarm/graph/ent/githubuser"
	"github.com/giantswarm/graph/ent/predicate"
)

// GitHubUserUpdate is the builder for updating GitHubUser entities.
type GitHubUserUpdate struct {
	config
	hooks    []Hook
	mutation *GitHubUserMutation
}

// Where appends a list predicates to the GitHubUserUpdate builder.
func (ghuu *GitHubUserUpdate) Where(ps ...predicate.GitHubUser) *GitHubUserUpdate {
	ghuu.mutation.Where(ps...)
	return ghuu
}

// SetLogin sets the "login" field.
func (ghuu *GitHubUserUpdate) SetLogin(s string) *GitHubUserUpdate {
	ghuu.mutation.SetLogin(s)
	return ghuu
}

// SetEmail sets the "email" field.
func (ghuu *GitHubUserUpdate) SetEmail(s string) *GitHubUserUpdate {
	ghuu.mutation.SetEmail(s)
	return ghuu
}

// SetName sets the "name" field.
func (ghuu *GitHubUserUpdate) SetName(s string) *GitHubUserUpdate {
	ghuu.mutation.SetName(s)
	return ghuu
}

// Mutation returns the GitHubUserMutation object of the builder.
func (ghuu *GitHubUserUpdate) Mutation() *GitHubUserMutation {
	return ghuu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ghuu *GitHubUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ghuu.hooks) == 0 {
		affected, err = ghuu.gremlinSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GitHubUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ghuu.mutation = mutation
			affected, err = ghuu.gremlinSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ghuu.hooks) - 1; i >= 0; i-- {
			if ghuu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ghuu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ghuu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ghuu *GitHubUserUpdate) SaveX(ctx context.Context) int {
	affected, err := ghuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ghuu *GitHubUserUpdate) Exec(ctx context.Context) error {
	_, err := ghuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ghuu *GitHubUserUpdate) ExecX(ctx context.Context) {
	if err := ghuu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ghuu *GitHubUserUpdate) gremlinSave(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := ghuu.gremlin().Query()
	if err := ghuu.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	return res.ReadInt()
}

func (ghuu *GitHubUserUpdate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 2)
	v := g.V().HasLabel(githubuser.Label)
	for _, p := range ghuu.mutation.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := ghuu.mutation.Login(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(githubuser.Label, githubuser.FieldLogin, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(githubuser.Label, githubuser.FieldLogin, value)),
		})
		v.Property(dsl.Single, githubuser.FieldLogin, value)
	}
	if value, ok := ghuu.mutation.Email(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(githubuser.Label, githubuser.FieldEmail, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(githubuser.Label, githubuser.FieldEmail, value)),
		})
		v.Property(dsl.Single, githubuser.FieldEmail, value)
	}
	if value, ok := ghuu.mutation.Name(); ok {
		v.Property(dsl.Single, githubuser.FieldName, value)
	}
	v.Count()
	if len(constraints) > 0 {
		constraints = append(constraints, &constraint{
			pred: rv.Count(),
			test: __.Is(p.GT(1)).Constant(&ConstraintError{msg: "update traversal contains more than one vertex"}),
		})
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// GitHubUserUpdateOne is the builder for updating a single GitHubUser entity.
type GitHubUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GitHubUserMutation
}

// SetLogin sets the "login" field.
func (ghuuo *GitHubUserUpdateOne) SetLogin(s string) *GitHubUserUpdateOne {
	ghuuo.mutation.SetLogin(s)
	return ghuuo
}

// SetEmail sets the "email" field.
func (ghuuo *GitHubUserUpdateOne) SetEmail(s string) *GitHubUserUpdateOne {
	ghuuo.mutation.SetEmail(s)
	return ghuuo
}

// SetName sets the "name" field.
func (ghuuo *GitHubUserUpdateOne) SetName(s string) *GitHubUserUpdateOne {
	ghuuo.mutation.SetName(s)
	return ghuuo
}

// Mutation returns the GitHubUserMutation object of the builder.
func (ghuuo *GitHubUserUpdateOne) Mutation() *GitHubUserMutation {
	return ghuuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ghuuo *GitHubUserUpdateOne) Select(field string, fields ...string) *GitHubUserUpdateOne {
	ghuuo.fields = append([]string{field}, fields...)
	return ghuuo
}

// Save executes the query and returns the updated GitHubUser entity.
func (ghuuo *GitHubUserUpdateOne) Save(ctx context.Context) (*GitHubUser, error) {
	var (
		err  error
		node *GitHubUser
	)
	if len(ghuuo.hooks) == 0 {
		node, err = ghuuo.gremlinSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GitHubUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ghuuo.mutation = mutation
			node, err = ghuuo.gremlinSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ghuuo.hooks) - 1; i >= 0; i-- {
			if ghuuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ghuuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ghuuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ghuuo *GitHubUserUpdateOne) SaveX(ctx context.Context) *GitHubUser {
	node, err := ghuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ghuuo *GitHubUserUpdateOne) Exec(ctx context.Context) error {
	_, err := ghuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ghuuo *GitHubUserUpdateOne) ExecX(ctx context.Context) {
	if err := ghuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ghuuo *GitHubUserUpdateOne) gremlinSave(ctx context.Context) (*GitHubUser, error) {
	res := &gremlin.Response{}
	id, ok := ghuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing GitHubUser.ID for update")}
	}
	query, bindings := ghuuo.gremlin(id).Query()
	if err := ghuuo.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	ghu := &GitHubUser{config: ghuuo.config}
	if err := ghu.FromResponse(res); err != nil {
		return nil, err
	}
	return ghu, nil
}

func (ghuuo *GitHubUserUpdateOne) gremlin(id int) *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 2)
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := ghuuo.mutation.Login(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(githubuser.Label, githubuser.FieldLogin, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(githubuser.Label, githubuser.FieldLogin, value)),
		})
		v.Property(dsl.Single, githubuser.FieldLogin, value)
	}
	if value, ok := ghuuo.mutation.Email(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(githubuser.Label, githubuser.FieldEmail, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(githubuser.Label, githubuser.FieldEmail, value)),
		})
		v.Property(dsl.Single, githubuser.FieldEmail, value)
	}
	if value, ok := ghuuo.mutation.Name(); ok {
		v.Property(dsl.Single, githubuser.FieldName, value)
	}
	if len(ghuuo.fields) > 0 {
		fields := make([]interface{}, 0, len(ghuuo.fields)+1)
		fields = append(fields, true)
		for _, f := range ghuuo.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	if len(constraints) > 0 {
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"github.com/giantswarm/graph/ent/githubissue"
	"github.com/giantswarm/graph/ent/githubuser"
	"github.com/giantswarm/graph/ent/person"
	"github.com/giantswarm/graph/ent/predicate"
)

// GitHubUserUpdate is the builder for updating GitHubUser entities.
type GitHubUserUpdate struct {
	config
	hooks    []Hook
	mutation *GitHubUserMutation
}

// Where appends a list predicates to the GitHubUserUpdate builder.
func (ghuu *GitHubUserUpdate) Where(ps ...predicate.GitHubUser) *GitHubUserUpdate {
	ghuu.mutation.Where(ps...)
	return ghuu
}

// SetGithubID sets the "github_id" field.
func (ghuu *GitHubUserUpdate) SetGithubID(i int) *GitHubUserUpdate {
	ghuu.mutation.ResetGithubID()
	ghuu.mutation.SetGithubID(i)
	return ghuu
}

// AddGithubID adds i to the "github_id" field.
func (ghuu *GitHubUserUpdate) AddGithubID(i int) *GitHubUserUpdate {
	ghuu.mutation.AddGithubID(i)
	return ghuu
}

// SetLogin sets the "login" field.
func (ghuu *GitHubUserUpdate) SetLogin(s string) *GitHubUserUpdate {
	ghuu.mutation.SetLogin(s)
	return ghuu
}

// SetEmail sets the "email" field.
func (ghuu *GitHubUserUpdate) SetEmail(s string) *GitHubUserUpdate {
	ghuu.mutation.SetEmail(s)
	return ghuu
}

// SetName sets the "name" field.
func (ghuu *GitHubUserUpdate) SetName(s string) *GitHubUserUpdate {
	ghuu.mutation.SetName(s)
	return ghuu
}

// AddCreatedIssueIDs adds the "created_issues" edge to the GitHubIssue entity by IDs.
func (ghuu *GitHubUserUpdate) AddCreatedIssueIDs(ids ...string) *GitHubUserUpdate {
	ghuu.mutation.AddCreatedIssueIDs(ids...)
	return ghuu
}

// AddCreatedIssues adds the "created_issues" edges to the GitHubIssue entity.
func (ghuu *GitHubUserUpdate) AddCreatedIssues(g ...*GitHubIssue) *GitHubUserUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ghuu.AddCreatedIssueIDs(ids...)
}

// AddClosedIssueIDs adds the "closed_issues" edge to the GitHubIssue entity by IDs.
func (ghuu *GitHubUserUpdate) AddClosedIssueIDs(ids ...string) *GitHubUserUpdate {
	ghuu.mutation.AddClosedIssueIDs(ids...)
	return ghuu
}

// AddClosedIssues adds the "closed_issues" edges to the GitHubIssue entity.
func (ghuu *GitHubUserUpdate) AddClosedIssues(g ...*GitHubIssue) *GitHubUserUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ghuu.AddClosedIssueIDs(ids...)
}

// SetPersonID sets the "person" edge to the Person entity by ID.
func (ghuu *GitHubUserUpdate) SetPersonID(id string) *GitHubUserUpdate {
	ghuu.mutation.SetPersonID(id)
	return ghuu
}

// SetNillablePersonID sets the "person" edge to the Person entity by ID if the given value is not nil.
func (ghuu *GitHubUserUpdate) SetNillablePersonID(id *string) *GitHubUserUpdate {
	if id != nil {
		ghuu = ghuu.SetPersonID(*id)
	}
	return ghuu
}

// SetPerson sets the "person" edge to the Person entity.
func (ghuu *GitHubUserUpdate) SetPerson(p *Person) *GitHubUserUpdate {
	return ghuu.SetPersonID(p.ID)
}

// AddAssignedIssueIDs adds the "assigned_issues" edge to the GitHubIssue entity by IDs.
func (ghuu *GitHubUserUpdate) AddAssignedIssueIDs(ids ...string) *GitHubUserUpdate {
	ghuu.mutation.AddAssignedIssueIDs(ids...)
	return ghuu
}

// AddAssignedIssues adds the "assigned_issues" edges to the GitHubIssue entity.
func (ghuu *GitHubUserUpdate) AddAssignedIssues(g ...*GitHubIssue) *GitHubUserUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ghuu.AddAssignedIssueIDs(ids...)
}

// Mutation returns the GitHubUserMutation object of the builder.
func (ghuu *GitHubUserUpdate) Mutation() *GitHubUserMutation {
	return ghuu.mutation
}

// ClearCreatedIssues clears all "created_issues" edges to the GitHubIssue entity.
func (ghuu *GitHubUserUpdate) ClearCreatedIssues() *GitHubUserUpdate {
	ghuu.mutation.ClearCreatedIssues()
	return ghuu
}

// RemoveCreatedIssueIDs removes the "created_issues" edge to GitHubIssue entities by IDs.
func (ghuu *GitHubUserUpdate) RemoveCreatedIssueIDs(ids ...string) *GitHubUserUpdate {
	ghuu.mutation.RemoveCreatedIssueIDs(ids...)
	return ghuu
}

// RemoveCreatedIssues removes "created_issues" edges to GitHubIssue entities.
func (ghuu *GitHubUserUpdate) RemoveCreatedIssues(g ...*GitHubIssue) *GitHubUserUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ghuu.RemoveCreatedIssueIDs(ids...)
}

// ClearClosedIssues clears all "closed_issues" edges to the GitHubIssue entity.
func (ghuu *GitHubUserUpdate) ClearClosedIssues() *GitHubUserUpdate {
	ghuu.mutation.ClearClosedIssues()
	return ghuu
}

// RemoveClosedIssueIDs removes the "closed_issues" edge to GitHubIssue entities by IDs.
func (ghuu *GitHubUserUpdate) RemoveClosedIssueIDs(ids ...string) *GitHubUserUpdate {
	ghuu.mutation.RemoveClosedIssueIDs(ids...)
	return ghuu
}

// RemoveClosedIssues removes "closed_issues" edges to GitHubIssue entities.
func (ghuu *GitHubUserUpdate) RemoveClosedIssues(g ...*GitHubIssue) *GitHubUserUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ghuu.RemoveClosedIssueIDs(ids...)
}

// ClearPerson clears the "person" edge to the Person entity.
func (ghuu *GitHubUserUpdate) ClearPerson() *GitHubUserUpdate {
	ghuu.mutation.ClearPerson()
	return ghuu
}

// ClearAssignedIssues clears all "assigned_issues" edges to the GitHubIssue entity.
func (ghuu *GitHubUserUpdate) ClearAssignedIssues() *GitHubUserUpdate {
	ghuu.mutation.ClearAssignedIssues()
	return ghuu
}

// RemoveAssignedIssueIDs removes the "assigned_issues" edge to GitHubIssue entities by IDs.
func (ghuu *GitHubUserUpdate) RemoveAssignedIssueIDs(ids ...string) *GitHubUserUpdate {
	ghuu.mutation.RemoveAssignedIssueIDs(ids...)
	return ghuu
}

// RemoveAssignedIssues removes "assigned_issues" edges to GitHubIssue entities.
func (ghuu *GitHubUserUpdate) RemoveAssignedIssues(g ...*GitHubIssue) *GitHubUserUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ghuu.RemoveAssignedIssueIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ghuu *GitHubUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ghuu.hooks) == 0 {
		if err = ghuu.check(); err != nil {
			return 0, err
		}
		affected, err = ghuu.gremlinSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GitHubUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ghuu.check(); err != nil {
				return 0, err
			}
			ghuu.mutation = mutation
			affected, err = ghuu.gremlinSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ghuu.hooks) - 1; i >= 0; i-- {
			if ghuu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ghuu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ghuu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ghuu *GitHubUserUpdate) SaveX(ctx context.Context) int {
	affected, err := ghuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ghuu *GitHubUserUpdate) Exec(ctx context.Context) error {
	_, err := ghuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ghuu *GitHubUserUpdate) ExecX(ctx context.Context) {
	if err := ghuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ghuu *GitHubUserUpdate) check() error {
	if v, ok := ghuu.mutation.GithubID(); ok {
		if err := githubuser.GithubIDValidator(v); err != nil {
			return &ValidationError{Name: "github_id", err: fmt.Errorf("ent: validator failed for field \"github_id\": %w", err)}
		}
	}
	return nil
}

func (ghuu *GitHubUserUpdate) gremlinSave(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := ghuu.gremlin().Query()
	if err := ghuu.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	return res.ReadInt()
}

func (ghuu *GitHubUserUpdate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 6)
	v := g.V().HasLabel(githubuser.Label)
	for _, p := range ghuu.mutation.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := ghuu.mutation.GithubID(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(githubuser.Label, githubuser.FieldGithubID, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(githubuser.Label, githubuser.FieldGithubID, value)),
		})
		v.Property(dsl.Single, githubuser.FieldGithubID, value)
	}
	if value, ok := ghuu.mutation.AddedGithubID(); ok {
		addValue := rv.Clone().Union(__.Values(githubuser.FieldGithubID), __.Constant(value)).Sum().Next()
		constraints = append(constraints, &constraint{
			pred: g.V().Has(githubuser.Label, githubuser.FieldGithubID, addValue).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(githubuser.Label, githubuser.FieldGithubID, fmt.Sprintf("+= %v", value))),
		})
		v.Property(dsl.Single, githubuser.FieldGithubID, __.Union(__.Values(githubuser.FieldGithubID), __.Constant(value)).Sum())
	}
	if value, ok := ghuu.mutation.Login(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(githubuser.Label, githubuser.FieldLogin, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(githubuser.Label, githubuser.FieldLogin, value)),
		})
		v.Property(dsl.Single, githubuser.FieldLogin, value)
	}
	if value, ok := ghuu.mutation.Email(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(githubuser.Label, githubuser.FieldEmail, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(githubuser.Label, githubuser.FieldEmail, value)),
		})
		v.Property(dsl.Single, githubuser.FieldEmail, value)
	}
	if value, ok := ghuu.mutation.Name(); ok {
		v.Property(dsl.Single, githubuser.FieldName, value)
	}
	for _, id := range ghuu.mutation.RemovedCreatedIssuesIDs() {
		tr := rv.Clone().OutE(githubuser.CreatedIssuesLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range ghuu.mutation.CreatedIssuesIDs() {
		v.AddE(githubuser.CreatedIssuesLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(githubuser.CreatedIssuesLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(githubuser.Label, githubuser.CreatedIssuesLabel, id)),
		})
	}
	for _, id := range ghuu.mutation.RemovedClosedIssuesIDs() {
		tr := rv.Clone().OutE(githubuser.ClosedIssuesLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range ghuu.mutation.ClosedIssuesIDs() {
		v.AddE(githubuser.ClosedIssuesLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(githubuser.ClosedIssuesLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(githubuser.Label, githubuser.ClosedIssuesLabel, id)),
		})
	}
	if ghuu.mutation.PersonCleared() {
		tr := rv.Clone().InE(person.GithubAccountLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range ghuu.mutation.PersonIDs() {
		v.AddE(person.GithubAccountLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(person.GithubAccountLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(githubuser.Label, person.GithubAccountLabel, id)),
		})
	}
	for _, id := range ghuu.mutation.RemovedAssignedIssuesIDs() {
		tr := rv.Clone().InE(githubissue.AssigneesLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range ghuu.mutation.AssignedIssuesIDs() {
		v.AddE(githubissue.AssigneesLabel).From(g.V(id)).InV()
	}
	v.Count()
	if len(constraints) > 0 {
		constraints = append(constraints, &constraint{
			pred: rv.Count(),
			test: __.Is(p.GT(1)).Constant(&ConstraintError{msg: "update traversal contains more than one vertex"}),
		})
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// GitHubUserUpdateOne is the builder for updating a single GitHubUser entity.
type GitHubUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GitHubUserMutation
}

// SetGithubID sets the "github_id" field.
func (ghuuo *GitHubUserUpdateOne) SetGithubID(i int) *GitHubUserUpdateOne {
	ghuuo.mutation.ResetGithubID()
	ghuuo.mutation.SetGithubID(i)
	return ghuuo
}

// AddGithubID adds i to the "github_id" field.
func (ghuuo *GitHubUserUpdateOne) AddGithubID(i int) *GitHubUserUpdateOne {
	ghuuo.mutation.AddGithubID(i)
	return ghuuo
}

// SetLogin sets the "login" field.
func (ghuuo *GitHubUserUpdateOne) SetLogin(s string) *GitHubUserUpdateOne {
	ghuuo.mutation.SetLogin(s)
	return ghuuo
}

// SetEmail sets the "email" field.
func (ghuuo *GitHubUserUpdateOne) SetEmail(s string) *GitHubUserUpdateOne {
	ghuuo.mutation.SetEmail(s)
	return ghuuo
}

// SetName sets the "name" field.
func (ghuuo *GitHubUserUpdateOne) SetName(s string) *GitHubUserUpdateOne {
	ghuuo.mutation.SetName(s)
	return ghuuo
}

// AddCreatedIssueIDs adds the "created_issues" edge to the GitHubIssue entity by IDs.
func (ghuuo *GitHubUserUpdateOne) AddCreatedIssueIDs(ids ...string) *GitHubUserUpdateOne {
	ghuuo.mutation.AddCreatedIssueIDs(ids...)
	return ghuuo
}

// AddCreatedIssues adds the "created_issues" edges to the GitHubIssue entity.
func (ghuuo *GitHubUserUpdateOne) AddCreatedIssues(g ...*GitHubIssue) *GitHubUserUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ghuuo.AddCreatedIssueIDs(ids...)
}

// AddClosedIssueIDs adds the "closed_issues" edge to the GitHubIssue entity by IDs.
func (ghuuo *GitHubUserUpdateOne) AddClosedIssueIDs(ids ...string) *GitHubUserUpdateOne {
	ghuuo.mutation.AddClosedIssueIDs(ids...)
	return ghuuo
}

// AddClosedIssues adds the "closed_issues" edges to the GitHubIssue entity.
func (ghuuo *GitHubUserUpdateOne) AddClosedIssues(g ...*GitHubIssue) *GitHubUserUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ghuuo.AddClosedIssueIDs(ids...)
}

// SetPersonID sets the "person" edge to the Person entity by ID.
func (ghuuo *GitHubUserUpdateOne) SetPersonID(id string) *GitHubUserUpdateOne {
	ghuuo.mutation.SetPersonID(id)
	return ghuuo
}

// SetNillablePersonID sets the "person" edge to the Person entity by ID if the given value is not nil.
func (ghuuo *GitHubUserUpdateOne) SetNillablePersonID(id *string) *GitHubUserUpdateOne {
	if id != nil {
		ghuuo = ghuuo.SetPersonID(*id)
	}
	return ghuuo
}

// SetPerson sets the "person" edge to the Person entity.
func (ghuuo *GitHubUserUpdateOne) SetPerson(p *Person) *GitHubUserUpdateOne {
	return ghuuo.SetPersonID(p.ID)
}

// AddAssignedIssueIDs adds the "assigned_issues" edge to the GitHubIssue entity by IDs.
func (ghuuo *GitHubUserUpdateOne) AddAssignedIssueIDs(ids ...string) *GitHubUserUpdateOne {
	ghuuo.mutation.AddAssignedIssueIDs(ids...)
	return ghuuo
}

// AddAssignedIssues adds the "assigned_issues" edges to the GitHubIssue entity.
func (ghuuo *GitHubUserUpdateOne) AddAssignedIssues(g ...*GitHubIssue) *GitHubUserUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ghuuo.AddAssignedIssueIDs(ids...)
}

// Mutation returns the GitHubUserMutation object of the builder.
func (ghuuo *GitHubUserUpdateOne) Mutation() *GitHubUserMutation {
	return ghuuo.mutation
}

// ClearCreatedIssues clears all "created_issues" edges to the GitHubIssue entity.
func (ghuuo *GitHubUserUpdateOne) ClearCreatedIssues() *GitHubUserUpdateOne {
	ghuuo.mutation.ClearCreatedIssues()
	return ghuuo
}

// RemoveCreatedIssueIDs removes the "created_issues" edge to GitHubIssue entities by IDs.
func (ghuuo *GitHubUserUpdateOne) RemoveCreatedIssueIDs(ids ...string) *GitHubUserUpdateOne {
	ghuuo.mutation.RemoveCreatedIssueIDs(ids...)
	return ghuuo
}

// RemoveCreatedIssues removes "created_issues" edges to GitHubIssue entities.
func (ghuuo *GitHubUserUpdateOne) RemoveCreatedIssues(g ...*GitHubIssue) *GitHubUserUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ghuuo.RemoveCreatedIssueIDs(ids...)
}

// ClearClosedIssues clears all "closed_issues" edges to the GitHubIssue entity.
func (ghuuo *GitHubUserUpdateOne) ClearClosedIssues() *GitHubUserUpdateOne {
	ghuuo.mutation.ClearClosedIssues()
	return ghuuo
}

// RemoveClosedIssueIDs removes the "closed_issues" edge to GitHubIssue entities by IDs.
func (ghuuo *GitHubUserUpdateOne) RemoveClosedIssueIDs(ids ...string) *GitHubUserUpdateOne {
	ghuuo.mutation.RemoveClosedIssueIDs(ids...)
	return ghuuo
}

// RemoveClosedIssues removes "closed_issues" edges to GitHubIssue entities.
func (ghuuo *GitHubUserUpdateOne) RemoveClosedIssues(g ...*GitHubIssue) *GitHubUserUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ghuuo.RemoveClosedIssueIDs(ids...)
}

// ClearPerson clears the "person" edge to the Person entity.
func (ghuuo *GitHubUserUpdateOne) ClearPerson() *GitHubUserUpdateOne {
	ghuuo.mutation.ClearPerson()
	return ghuuo
}

// ClearAssignedIssues clears all "assigned_issues" edges to the GitHubIssue entity.
func (ghuuo *GitHubUserUpdateOne) ClearAssignedIssues() *GitHubUserUpdateOne {
	ghuuo.mutation.ClearAssignedIssues()
	return ghuuo
}

// RemoveAssignedIssueIDs removes the "assigned_issues" edge to GitHubIssue entities by IDs.
func (ghuuo *GitHubUserUpdateOne) RemoveAssignedIssueIDs(ids ...string) *GitHubUserUpdateOne {
	ghuuo.mutation.RemoveAssignedIssueIDs(ids...)
	return ghuuo
}

// RemoveAssignedIssues removes "assigned_issues" edges to GitHubIssue entities.
func (ghuuo *GitHubUserUpdateOne) RemoveAssignedIssues(g ...*GitHubIssue) *GitHubUserUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ghuuo.RemoveAssignedIssueIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ghuuo *GitHubUserUpdateOne) Select(field string, fields ...string) *GitHubUserUpdateOne {
	ghuuo.fields = append([]string{field}, fields...)
	return ghuuo
}

// Save executes the query and returns the updated GitHubUser entity.
func (ghuuo *GitHubUserUpdateOne) Save(ctx context.Context) (*GitHubUser, error) {
	var (
		err  error
		node *GitHubUser
	)
	if len(ghuuo.hooks) == 0 {
		if err = ghuuo.check(); err != nil {
			return nil, err
		}
		node, err = ghuuo.gremlinSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GitHubUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ghuuo.check(); err != nil {
				return nil, err
			}
			ghuuo.mutation = mutation
			node, err = ghuuo.gremlinSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ghuuo.hooks) - 1; i >= 0; i-- {
			if ghuuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ghuuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ghuuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ghuuo *GitHubUserUpdateOne) SaveX(ctx context.Context) *GitHubUser {
	node, err := ghuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ghuuo *GitHubUserUpdateOne) Exec(ctx context.Context) error {
	_, err := ghuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ghuuo *GitHubUserUpdateOne) ExecX(ctx context.Context) {
	if err := ghuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ghuuo *GitHubUserUpdateOne) check() error {
	if v, ok := ghuuo.mutation.GithubID(); ok {
		if err := githubuser.GithubIDValidator(v); err != nil {
			return &ValidationError{Name: "github_id", err: fmt.Errorf("ent: validator failed for field \"github_id\": %w", err)}
		}
	}
	return nil
}

func (ghuuo *GitHubUserUpdateOne) gremlinSave(ctx context.Context) (*GitHubUser, error) {
	res := &gremlin.Response{}
	id, ok := ghuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing GitHubUser.ID for update")}
	}
	query, bindings := ghuuo.gremlin(id).Query()
	if err := ghuuo.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	ghu := &GitHubUser{config: ghuuo.config}
	if err := ghu.FromResponse(res); err != nil {
		return nil, err
	}
	return ghu, nil
}

func (ghuuo *GitHubUserUpdateOne) gremlin(id string) *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 6)
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := ghuuo.mutation.GithubID(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(githubuser.Label, githubuser.FieldGithubID, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(githubuser.Label, githubuser.FieldGithubID, value)),
		})
		v.Property(dsl.Single, githubuser.FieldGithubID, value)
	}
	if value, ok := ghuuo.mutation.AddedGithubID(); ok {
		addValue := rv.Clone().Union(__.Values(githubuser.FieldGithubID), __.Constant(value)).Sum().Next()
		constraints = append(constraints, &constraint{
			pred: g.V().Has(githubuser.Label, githubuser.FieldGithubID, addValue).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(githubuser.Label, githubuser.FieldGithubID, fmt.Sprintf("+= %v", value))),
		})
		v.Property(dsl.Single, githubuser.FieldGithubID, __.Union(__.Values(githubuser.FieldGithubID), __.Constant(value)).Sum())
	}
	if value, ok := ghuuo.mutation.Login(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(githubuser.Label, githubuser.FieldLogin, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(githubuser.Label, githubuser.FieldLogin, value)),
		})
		v.Property(dsl.Single, githubuser.FieldLogin, value)
	}
	if value, ok := ghuuo.mutation.Email(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(githubuser.Label, githubuser.FieldEmail, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(githubuser.Label, githubuser.FieldEmail, value)),
		})
		v.Property(dsl.Single, githubuser.FieldEmail, value)
	}
	if value, ok := ghuuo.mutation.Name(); ok {
		v.Property(dsl.Single, githubuser.FieldName, value)
	}
	for _, id := range ghuuo.mutation.RemovedCreatedIssuesIDs() {
		tr := rv.Clone().OutE(githubuser.CreatedIssuesLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range ghuuo.mutation.CreatedIssuesIDs() {
		v.AddE(githubuser.CreatedIssuesLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(githubuser.CreatedIssuesLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(githubuser.Label, githubuser.CreatedIssuesLabel, id)),
		})
	}
	for _, id := range ghuuo.mutation.RemovedClosedIssuesIDs() {
		tr := rv.Clone().OutE(githubuser.ClosedIssuesLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range ghuuo.mutation.ClosedIssuesIDs() {
		v.AddE(githubuser.ClosedIssuesLabel).To(g.V(id)).OutV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(githubuser.ClosedIssuesLabel).InV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(githubuser.Label, githubuser.ClosedIssuesLabel, id)),
		})
	}
	if ghuuo.mutation.PersonCleared() {
		tr := rv.Clone().InE(person.GithubAccountLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range ghuuo.mutation.PersonIDs() {
		v.AddE(person.GithubAccountLabel).From(g.V(id)).InV()
		constraints = append(constraints, &constraint{
			pred: g.E().HasLabel(person.GithubAccountLabel).OutV().HasID(id).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueEdge(githubuser.Label, person.GithubAccountLabel, id)),
		})
	}
	for _, id := range ghuuo.mutation.RemovedAssignedIssuesIDs() {
		tr := rv.Clone().InE(githubissue.AssigneesLabel).Where(__.OtherV().HasID(id)).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range ghuuo.mutation.AssignedIssuesIDs() {
		v.AddE(githubissue.AssigneesLabel).From(g.V(id)).InV()
	}
	if len(ghuuo.fields) > 0 {
		fields := make([]interface{}, 0, len(ghuuo.fields)+1)
		fields = append(fields, true)
		for _, f := range ghuuo.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	if len(constraints) > 0 {
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}

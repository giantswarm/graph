// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"github.com/giantswarm/graph/ent/person"
	"github.com/giantswarm/graph/ent/predicate"
)

// PersonUpdate is the builder for updating Person entities.
type PersonUpdate struct {
	config
	hooks    []Hook
	mutation *PersonMutation
}

// Where appends a list predicates to the PersonUpdate builder.
func (pu *PersonUpdate) Where(ps ...predicate.Person) *PersonUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetEmail sets the "email" field.
func (pu *PersonUpdate) SetEmail(s string) *PersonUpdate {
	pu.mutation.SetEmail(s)
	return pu
}

// SetName sets the "name" field.
func (pu *PersonUpdate) SetName(s string) *PersonUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetIsGiantSwarmEmployee sets the "isGiantSwarmEmployee" field.
func (pu *PersonUpdate) SetIsGiantSwarmEmployee(b bool) *PersonUpdate {
	pu.mutation.SetIsGiantSwarmEmployee(b)
	return pu
}

// SetGitHubAccountID sets the "gitHubAccount" edge to the GitHubUser entity by ID.
func (pu *PersonUpdate) SetGitHubAccountID(id int) *PersonUpdate {
	pu.mutation.SetGitHubAccountID(id)
	return pu
}

// SetNillableGitHubAccountID sets the "gitHubAccount" edge to the GitHubUser entity by ID if the given value is not nil.
func (pu *PersonUpdate) SetNillableGitHubAccountID(id *int) *PersonUpdate {
	if id != nil {
		pu = pu.SetGitHubAccountID(*id)
	}
	return pu
}

// SetGitHubAccount sets the "gitHubAccount" edge to the GitHubUser entity.
func (pu *PersonUpdate) SetGitHubAccount(g *GitHubUser) *PersonUpdate {
	return pu.SetGitHubAccountID(g.ID)
}

// Mutation returns the PersonMutation object of the builder.
func (pu *PersonUpdate) Mutation() *PersonMutation {
	return pu.mutation
}

// ClearGitHubAccount clears the "gitHubAccount" edge to the GitHubUser entity.
func (pu *PersonUpdate) ClearGitHubAccount() *PersonUpdate {
	pu.mutation.ClearGitHubAccount()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PersonUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.gremlinSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.gremlinSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PersonUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PersonUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PersonUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PersonUpdate) gremlinSave(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := pu.gremlin().Query()
	if err := pu.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	if err, ok := isConstantError(res); ok {
		return 0, err
	}
	return res.ReadInt()
}

func (pu *PersonUpdate) gremlin() *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 1)
	v := g.V().HasLabel(person.Label)
	for _, p := range pu.mutation.predicates {
		p(v)
	}
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := pu.mutation.Email(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(person.Label, person.FieldEmail, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(person.Label, person.FieldEmail, value)),
		})
		v.Property(dsl.Single, person.FieldEmail, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		v.Property(dsl.Single, person.FieldName, value)
	}
	if value, ok := pu.mutation.IsGiantSwarmEmployee(); ok {
		v.Property(dsl.Single, person.FieldIsGiantSwarmEmployee, value)
	}
	if pu.mutation.GitHubAccountCleared() {
		tr := rv.Clone().OutE(person.GitHubAccountLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range pu.mutation.GitHubAccountIDs() {
		v.AddE(person.GitHubAccountLabel).To(g.V(id)).OutV()
	}
	v.Count()
	if len(constraints) > 0 {
		constraints = append(constraints, &constraint{
			pred: rv.Count(),
			test: __.Is(p.GT(1)).Constant(&ConstraintError{msg: "update traversal contains more than one vertex"}),
		})
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}

// PersonUpdateOne is the builder for updating a single Person entity.
type PersonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonMutation
}

// SetEmail sets the "email" field.
func (puo *PersonUpdateOne) SetEmail(s string) *PersonUpdateOne {
	puo.mutation.SetEmail(s)
	return puo
}

// SetName sets the "name" field.
func (puo *PersonUpdateOne) SetName(s string) *PersonUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetIsGiantSwarmEmployee sets the "isGiantSwarmEmployee" field.
func (puo *PersonUpdateOne) SetIsGiantSwarmEmployee(b bool) *PersonUpdateOne {
	puo.mutation.SetIsGiantSwarmEmployee(b)
	return puo
}

// SetGitHubAccountID sets the "gitHubAccount" edge to the GitHubUser entity by ID.
func (puo *PersonUpdateOne) SetGitHubAccountID(id int) *PersonUpdateOne {
	puo.mutation.SetGitHubAccountID(id)
	return puo
}

// SetNillableGitHubAccountID sets the "gitHubAccount" edge to the GitHubUser entity by ID if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableGitHubAccountID(id *int) *PersonUpdateOne {
	if id != nil {
		puo = puo.SetGitHubAccountID(*id)
	}
	return puo
}

// SetGitHubAccount sets the "gitHubAccount" edge to the GitHubUser entity.
func (puo *PersonUpdateOne) SetGitHubAccount(g *GitHubUser) *PersonUpdateOne {
	return puo.SetGitHubAccountID(g.ID)
}

// Mutation returns the PersonMutation object of the builder.
func (puo *PersonUpdateOne) Mutation() *PersonMutation {
	return puo.mutation
}

// ClearGitHubAccount clears the "gitHubAccount" edge to the GitHubUser entity.
func (puo *PersonUpdateOne) ClearGitHubAccount() *PersonUpdateOne {
	puo.mutation.ClearGitHubAccount()
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PersonUpdateOne) Select(field string, fields ...string) *PersonUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Person entity.
func (puo *PersonUpdateOne) Save(ctx context.Context) (*Person, error) {
	var (
		err  error
		node *Person
	)
	if len(puo.hooks) == 0 {
		node, err = puo.gremlinSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.gremlinSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PersonUpdateOne) SaveX(ctx context.Context) *Person {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PersonUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PersonUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PersonUpdateOne) gremlinSave(ctx context.Context) (*Person, error) {
	res := &gremlin.Response{}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Person.ID for update")}
	}
	query, bindings := puo.gremlin(id).Query()
	if err := puo.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	if err, ok := isConstantError(res); ok {
		return nil, err
	}
	pe := &Person{config: puo.config}
	if err := pe.FromResponse(res); err != nil {
		return nil, err
	}
	return pe, nil
}

func (puo *PersonUpdateOne) gremlin(id int) *dsl.Traversal {
	type constraint struct {
		pred *dsl.Traversal // constraint predicate.
		test *dsl.Traversal // test matches and its constant.
	}
	constraints := make([]*constraint, 0, 1)
	v := g.V(id)
	var (
		rv = v.Clone()
		_  = rv

		trs []*dsl.Traversal
	)
	if value, ok := puo.mutation.Email(); ok {
		constraints = append(constraints, &constraint{
			pred: g.V().Has(person.Label, person.FieldEmail, value).Count(),
			test: __.Is(p.NEQ(0)).Constant(NewErrUniqueField(person.Label, person.FieldEmail, value)),
		})
		v.Property(dsl.Single, person.FieldEmail, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		v.Property(dsl.Single, person.FieldName, value)
	}
	if value, ok := puo.mutation.IsGiantSwarmEmployee(); ok {
		v.Property(dsl.Single, person.FieldIsGiantSwarmEmployee, value)
	}
	if puo.mutation.GitHubAccountCleared() {
		tr := rv.Clone().OutE(person.GitHubAccountLabel).Drop().Iterate()
		trs = append(trs, tr)
	}
	for _, id := range puo.mutation.GitHubAccountIDs() {
		v.AddE(person.GitHubAccountLabel).To(g.V(id)).OutV()
	}
	if len(puo.fields) > 0 {
		fields := make([]interface{}, 0, len(puo.fields)+1)
		fields = append(fields, true)
		for _, f := range puo.fields {
			fields = append(fields, f)
		}
		v.ValueMap(fields...)
	} else {
		v.ValueMap(true)
	}
	if len(constraints) > 0 {
		v = constraints[0].pred.Coalesce(constraints[0].test, v)
		for _, cr := range constraints[1:] {
			v = cr.pred.Coalesce(cr.test, v)
		}
	}
	trs = append(trs, v)
	return dsl.Join(trs...)
}

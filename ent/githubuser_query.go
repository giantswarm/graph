// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
	"github.com/giantswarm/graph/ent/githubissue"
	"github.com/giantswarm/graph/ent/githubuser"
	"github.com/giantswarm/graph/ent/person"
	"github.com/giantswarm/graph/ent/predicate"
)

// GitHubUserQuery is the builder for querying GitHubUser entities.
type GitHubUserQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.GitHubUser
	// eager-loading edges.
	withCreatedIssues  *GitHubIssueQuery
	withClosedIssues   *GitHubIssueQuery
	withPerson         *PersonQuery
	withAssignedIssues *GitHubIssueQuery
	// intermediate query (i.e. traversal path).
	gremlin *dsl.Traversal
	path    func(context.Context) (*dsl.Traversal, error)
}

// Where adds a new predicate for the GitHubUserQuery builder.
func (ghuq *GitHubUserQuery) Where(ps ...predicate.GitHubUser) *GitHubUserQuery {
	ghuq.predicates = append(ghuq.predicates, ps...)
	return ghuq
}

// Limit adds a limit step to the query.
func (ghuq *GitHubUserQuery) Limit(limit int) *GitHubUserQuery {
	ghuq.limit = &limit
	return ghuq
}

// Offset adds an offset step to the query.
func (ghuq *GitHubUserQuery) Offset(offset int) *GitHubUserQuery {
	ghuq.offset = &offset
	return ghuq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ghuq *GitHubUserQuery) Unique(unique bool) *GitHubUserQuery {
	ghuq.unique = &unique
	return ghuq
}

// Order adds an order step to the query.
func (ghuq *GitHubUserQuery) Order(o ...OrderFunc) *GitHubUserQuery {
	ghuq.order = append(ghuq.order, o...)
	return ghuq
}

// QueryCreatedIssues chains the current query on the "created_issues" edge.
func (ghuq *GitHubUserQuery) QueryCreatedIssues() *GitHubIssueQuery {
	query := &GitHubIssueQuery{config: ghuq.config}
	query.path = func(ctx context.Context) (fromU *dsl.Traversal, err error) {
		if err := ghuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		gremlin := ghuq.gremlinQuery(ctx)
		fromU = gremlin.OutE(githubuser.CreatedIssuesLabel).InV()
		return fromU, nil
	}
	return query
}

// QueryClosedIssues chains the current query on the "closed_issues" edge.
func (ghuq *GitHubUserQuery) QueryClosedIssues() *GitHubIssueQuery {
	query := &GitHubIssueQuery{config: ghuq.config}
	query.path = func(ctx context.Context) (fromU *dsl.Traversal, err error) {
		if err := ghuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		gremlin := ghuq.gremlinQuery(ctx)
		fromU = gremlin.OutE(githubuser.ClosedIssuesLabel).InV()
		return fromU, nil
	}
	return query
}

// QueryPerson chains the current query on the "person" edge.
func (ghuq *GitHubUserQuery) QueryPerson() *PersonQuery {
	query := &PersonQuery{config: ghuq.config}
	query.path = func(ctx context.Context) (fromU *dsl.Traversal, err error) {
		if err := ghuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		gremlin := ghuq.gremlinQuery(ctx)
		fromU = gremlin.InE(person.GithubAccountLabel).OutV()
		return fromU, nil
	}
	return query
}

// QueryAssignedIssues chains the current query on the "assigned_issues" edge.
func (ghuq *GitHubUserQuery) QueryAssignedIssues() *GitHubIssueQuery {
	query := &GitHubIssueQuery{config: ghuq.config}
	query.path = func(ctx context.Context) (fromU *dsl.Traversal, err error) {
		if err := ghuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		gremlin := ghuq.gremlinQuery(ctx)
		fromU = gremlin.InE(githubissue.AssigneesLabel).OutV()
		return fromU, nil
	}
	return query
}

// First returns the first GitHubUser entity from the query.
// Returns a *NotFoundError when no GitHubUser was found.
func (ghuq *GitHubUserQuery) First(ctx context.Context) (*GitHubUser, error) {
	nodes, err := ghuq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{githubuser.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ghuq *GitHubUserQuery) FirstX(ctx context.Context) *GitHubUser {
	node, err := ghuq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GitHubUser ID from the query.
// Returns a *NotFoundError when no GitHubUser ID was found.
func (ghuq *GitHubUserQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ghuq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{githubuser.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ghuq *GitHubUserQuery) FirstIDX(ctx context.Context) string {
	id, err := ghuq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GitHubUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one GitHubUser entity is not found.
// Returns a *NotFoundError when no GitHubUser entities are found.
func (ghuq *GitHubUserQuery) Only(ctx context.Context) (*GitHubUser, error) {
	nodes, err := ghuq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{githubuser.Label}
	default:
		return nil, &NotSingularError{githubuser.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ghuq *GitHubUserQuery) OnlyX(ctx context.Context) *GitHubUser {
	node, err := ghuq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GitHubUser ID in the query.
// Returns a *NotSingularError when exactly one GitHubUser ID is not found.
// Returns a *NotFoundError when no entities are found.
func (ghuq *GitHubUserQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ghuq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{githubuser.Label}
	default:
		err = &NotSingularError{githubuser.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ghuq *GitHubUserQuery) OnlyIDX(ctx context.Context) string {
	id, err := ghuq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GitHubUsers.
func (ghuq *GitHubUserQuery) All(ctx context.Context) ([]*GitHubUser, error) {
	if err := ghuq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ghuq.gremlinAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ghuq *GitHubUserQuery) AllX(ctx context.Context) []*GitHubUser {
	nodes, err := ghuq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GitHubUser IDs.
func (ghuq *GitHubUserQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := ghuq.Select(githubuser.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ghuq *GitHubUserQuery) IDsX(ctx context.Context) []string {
	ids, err := ghuq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ghuq *GitHubUserQuery) Count(ctx context.Context) (int, error) {
	if err := ghuq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ghuq.gremlinCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ghuq *GitHubUserQuery) CountX(ctx context.Context) int {
	count, err := ghuq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ghuq *GitHubUserQuery) Exist(ctx context.Context) (bool, error) {
	if err := ghuq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ghuq.gremlinExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ghuq *GitHubUserQuery) ExistX(ctx context.Context) bool {
	exist, err := ghuq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GitHubUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ghuq *GitHubUserQuery) Clone() *GitHubUserQuery {
	if ghuq == nil {
		return nil
	}
	return &GitHubUserQuery{
		config:             ghuq.config,
		limit:              ghuq.limit,
		offset:             ghuq.offset,
		order:              append([]OrderFunc{}, ghuq.order...),
		predicates:         append([]predicate.GitHubUser{}, ghuq.predicates...),
		withCreatedIssues:  ghuq.withCreatedIssues.Clone(),
		withClosedIssues:   ghuq.withClosedIssues.Clone(),
		withPerson:         ghuq.withPerson.Clone(),
		withAssignedIssues: ghuq.withAssignedIssues.Clone(),
		// clone intermediate query.
		gremlin: ghuq.gremlin.Clone(),
		path:    ghuq.path,
	}
}

// WithCreatedIssues tells the query-builder to eager-load the nodes that are connected to
// the "created_issues" edge. The optional arguments are used to configure the query builder of the edge.
func (ghuq *GitHubUserQuery) WithCreatedIssues(opts ...func(*GitHubIssueQuery)) *GitHubUserQuery {
	query := &GitHubIssueQuery{config: ghuq.config}
	for _, opt := range opts {
		opt(query)
	}
	ghuq.withCreatedIssues = query
	return ghuq
}

// WithClosedIssues tells the query-builder to eager-load the nodes that are connected to
// the "closed_issues" edge. The optional arguments are used to configure the query builder of the edge.
func (ghuq *GitHubUserQuery) WithClosedIssues(opts ...func(*GitHubIssueQuery)) *GitHubUserQuery {
	query := &GitHubIssueQuery{config: ghuq.config}
	for _, opt := range opts {
		opt(query)
	}
	ghuq.withClosedIssues = query
	return ghuq
}

// WithPerson tells the query-builder to eager-load the nodes that are connected to
// the "person" edge. The optional arguments are used to configure the query builder of the edge.
func (ghuq *GitHubUserQuery) WithPerson(opts ...func(*PersonQuery)) *GitHubUserQuery {
	query := &PersonQuery{config: ghuq.config}
	for _, opt := range opts {
		opt(query)
	}
	ghuq.withPerson = query
	return ghuq
}

// WithAssignedIssues tells the query-builder to eager-load the nodes that are connected to
// the "assigned_issues" edge. The optional arguments are used to configure the query builder of the edge.
func (ghuq *GitHubUserQuery) WithAssignedIssues(opts ...func(*GitHubIssueQuery)) *GitHubUserQuery {
	query := &GitHubIssueQuery{config: ghuq.config}
	for _, opt := range opts {
		opt(query)
	}
	ghuq.withAssignedIssues = query
	return ghuq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		GithubID int `json:"github_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GitHubUser.Query().
//		GroupBy(githubuser.FieldGithubID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (ghuq *GitHubUserQuery) GroupBy(field string, fields ...string) *GitHubUserGroupBy {
	group := &GitHubUserGroupBy{config: ghuq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *dsl.Traversal, err error) {
		if err := ghuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ghuq.gremlinQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		GithubID int `json:"github_id,omitempty"`
//	}
//
//	client.GitHubUser.Query().
//		Select(githubuser.FieldGithubID).
//		Scan(ctx, &v)
//
func (ghuq *GitHubUserQuery) Select(fields ...string) *GitHubUserSelect {
	ghuq.fields = append(ghuq.fields, fields...)
	return &GitHubUserSelect{GitHubUserQuery: ghuq}
}

func (ghuq *GitHubUserQuery) prepareQuery(ctx context.Context) error {
	if ghuq.path != nil {
		prev, err := ghuq.path(ctx)
		if err != nil {
			return err
		}
		ghuq.gremlin = prev
	}
	return nil
}

func (ghuq *GitHubUserQuery) gremlinAll(ctx context.Context) ([]*GitHubUser, error) {
	res := &gremlin.Response{}
	traversal := ghuq.gremlinQuery(ctx)
	if len(ghuq.fields) > 0 {
		fields := make([]interface{}, len(ghuq.fields))
		for i, f := range ghuq.fields {
			fields[i] = f
		}
		traversal.ValueMap(fields...)
	} else {
		traversal.ValueMap(true)
	}
	query, bindings := traversal.Query()
	if err := ghuq.driver.Exec(ctx, query, bindings, res); err != nil {
		return nil, err
	}
	var ghus GitHubUsers
	if err := ghus.FromResponse(res); err != nil {
		return nil, err
	}
	ghus.config(ghuq.config)
	return ghus, nil
}

func (ghuq *GitHubUserQuery) gremlinCount(ctx context.Context) (int, error) {
	res := &gremlin.Response{}
	query, bindings := ghuq.gremlinQuery(ctx).Count().Query()
	if err := ghuq.driver.Exec(ctx, query, bindings, res); err != nil {
		return 0, err
	}
	return res.ReadInt()
}

func (ghuq *GitHubUserQuery) gremlinExist(ctx context.Context) (bool, error) {
	res := &gremlin.Response{}
	query, bindings := ghuq.gremlinQuery(ctx).HasNext().Query()
	if err := ghuq.driver.Exec(ctx, query, bindings, res); err != nil {
		return false, err
	}
	return res.ReadBool()
}

func (ghuq *GitHubUserQuery) gremlinQuery(context.Context) *dsl.Traversal {
	v := g.V().HasLabel(githubuser.Label)
	if ghuq.gremlin != nil {
		v = ghuq.gremlin.Clone()
	}
	for _, p := range ghuq.predicates {
		p(v)
	}
	if len(ghuq.order) > 0 {
		v.Order()
		for _, p := range ghuq.order {
			p(v)
		}
	}
	switch limit, offset := ghuq.limit, ghuq.offset; {
	case limit != nil && offset != nil:
		v.Range(*offset, *offset+*limit)
	case offset != nil:
		v.Range(*offset, math.MaxInt32)
	case limit != nil:
		v.Limit(*limit)
	}
	if unique := ghuq.unique; unique == nil || *unique {
		v.Dedup()
	}
	return v
}

// GitHubUserGroupBy is the group-by builder for GitHubUser entities.
type GitHubUserGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	gremlin *dsl.Traversal
	path    func(context.Context) (*dsl.Traversal, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ghugb *GitHubUserGroupBy) Aggregate(fns ...AggregateFunc) *GitHubUserGroupBy {
	ghugb.fns = append(ghugb.fns, fns...)
	return ghugb
}

// Scan applies the group-by query and scans the result into the given value.
func (ghugb *GitHubUserGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ghugb.path(ctx)
	if err != nil {
		return err
	}
	ghugb.gremlin = query
	return ghugb.gremlinScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ghugb *GitHubUserGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ghugb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (ghugb *GitHubUserGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ghugb.fields) > 1 {
		return nil, errors.New("ent: GitHubUserGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ghugb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ghugb *GitHubUserGroupBy) StringsX(ctx context.Context) []string {
	v, err := ghugb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ghugb *GitHubUserGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ghugb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{githubuser.Label}
	default:
		err = fmt.Errorf("ent: GitHubUserGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ghugb *GitHubUserGroupBy) StringX(ctx context.Context) string {
	v, err := ghugb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (ghugb *GitHubUserGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ghugb.fields) > 1 {
		return nil, errors.New("ent: GitHubUserGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ghugb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ghugb *GitHubUserGroupBy) IntsX(ctx context.Context) []int {
	v, err := ghugb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ghugb *GitHubUserGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ghugb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{githubuser.Label}
	default:
		err = fmt.Errorf("ent: GitHubUserGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ghugb *GitHubUserGroupBy) IntX(ctx context.Context) int {
	v, err := ghugb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (ghugb *GitHubUserGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ghugb.fields) > 1 {
		return nil, errors.New("ent: GitHubUserGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ghugb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ghugb *GitHubUserGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ghugb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ghugb *GitHubUserGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ghugb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{githubuser.Label}
	default:
		err = fmt.Errorf("ent: GitHubUserGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ghugb *GitHubUserGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ghugb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (ghugb *GitHubUserGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ghugb.fields) > 1 {
		return nil, errors.New("ent: GitHubUserGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ghugb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ghugb *GitHubUserGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ghugb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ghugb *GitHubUserGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ghugb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{githubuser.Label}
	default:
		err = fmt.Errorf("ent: GitHubUserGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ghugb *GitHubUserGroupBy) BoolX(ctx context.Context) bool {
	v, err := ghugb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ghugb *GitHubUserGroupBy) gremlinScan(ctx context.Context, v interface{}) error {
	res := &gremlin.Response{}
	query, bindings := ghugb.gremlinQuery().Query()
	if err := ghugb.driver.Exec(ctx, query, bindings, res); err != nil {
		return err
	}
	if len(ghugb.fields)+len(ghugb.fns) == 1 {
		return res.ReadVal(v)
	}
	vm, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	return vm.Decode(v)
}

func (ghugb *GitHubUserGroupBy) gremlinQuery() *dsl.Traversal {
	var (
		trs   []interface{}
		names []interface{}
	)
	for _, fn := range ghugb.fns {
		name, tr := fn("p", "")
		trs = append(trs, tr)
		names = append(names, name)
	}
	for _, f := range ghugb.fields {
		names = append(names, f)
		trs = append(trs, __.As("p").Unfold().Values(f).As(f))
	}
	return ghugb.gremlin.Group().
		By(__.Values(ghugb.fields...).Fold()).
		By(__.Fold().Match(trs...).Select(names...)).
		Select(dsl.Values).
		Next()
}

// GitHubUserSelect is the builder for selecting fields of GitHubUser entities.
type GitHubUserSelect struct {
	*GitHubUserQuery
	// intermediate query (i.e. traversal path).
	gremlin *dsl.Traversal
}

// Scan applies the selector query and scans the result into the given value.
func (ghus *GitHubUserSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ghus.prepareQuery(ctx); err != nil {
		return err
	}
	ghus.gremlin = ghus.GitHubUserQuery.gremlinQuery(ctx)
	return ghus.gremlinScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ghus *GitHubUserSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ghus.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ghus *GitHubUserSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ghus.fields) > 1 {
		return nil, errors.New("ent: GitHubUserSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ghus.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ghus *GitHubUserSelect) StringsX(ctx context.Context) []string {
	v, err := ghus.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ghus *GitHubUserSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ghus.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{githubuser.Label}
	default:
		err = fmt.Errorf("ent: GitHubUserSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ghus *GitHubUserSelect) StringX(ctx context.Context) string {
	v, err := ghus.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ghus *GitHubUserSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ghus.fields) > 1 {
		return nil, errors.New("ent: GitHubUserSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ghus.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ghus *GitHubUserSelect) IntsX(ctx context.Context) []int {
	v, err := ghus.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ghus *GitHubUserSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ghus.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{githubuser.Label}
	default:
		err = fmt.Errorf("ent: GitHubUserSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ghus *GitHubUserSelect) IntX(ctx context.Context) int {
	v, err := ghus.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ghus *GitHubUserSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ghus.fields) > 1 {
		return nil, errors.New("ent: GitHubUserSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ghus.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ghus *GitHubUserSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ghus.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ghus *GitHubUserSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ghus.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{githubuser.Label}
	default:
		err = fmt.Errorf("ent: GitHubUserSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ghus *GitHubUserSelect) Float64X(ctx context.Context) float64 {
	v, err := ghus.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ghus *GitHubUserSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ghus.fields) > 1 {
		return nil, errors.New("ent: GitHubUserSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ghus.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ghus *GitHubUserSelect) BoolsX(ctx context.Context) []bool {
	v, err := ghus.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ghus *GitHubUserSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ghus.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{githubuser.Label}
	default:
		err = fmt.Errorf("ent: GitHubUserSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ghus *GitHubUserSelect) BoolX(ctx context.Context) bool {
	v, err := ghus.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ghus *GitHubUserSelect) gremlinScan(ctx context.Context, v interface{}) error {
	var (
		traversal *dsl.Traversal
		res       = &gremlin.Response{}
	)
	if len(ghus.fields) == 1 {
		if ghus.fields[0] != githubuser.FieldID {
			traversal = ghus.gremlin.Values(ghus.fields...)
		} else {
			traversal = ghus.gremlin.ID()
		}
	} else {
		fields := make([]interface{}, len(ghus.fields))
		for i, f := range ghus.fields {
			fields[i] = f
		}
		traversal = ghus.gremlin.ValueMap(fields...)
	}
	query, bindings := traversal.Query()
	if err := ghus.driver.Exec(ctx, query, bindings, res); err != nil {
		return err
	}
	if len(ghus.fields) == 1 {
		return res.ReadVal(v)
	}
	vm, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	return vm.Decode(v)
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"
	"net/url"

	"github.com/giantswarm/graph/ent/cluster"
	"github.com/giantswarm/graph/ent/githubissue"
	"github.com/giantswarm/graph/ent/githubuser"
	"github.com/giantswarm/graph/ent/person"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/gremlin"
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/g"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Cluster is the client for interacting with the Cluster builders.
	Cluster *ClusterClient
	// GitHubIssue is the client for interacting with the GitHubIssue builders.
	GitHubIssue *GitHubIssueClient
	// GitHubUser is the client for interacting with the GitHubUser builders.
	GitHubUser *GitHubUserClient
	// Person is the client for interacting with the Person builders.
	Person *PersonClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Cluster = NewClusterClient(c.config)
	c.GitHubIssue = NewGitHubIssueClient(c.config)
	c.GitHubUser = NewGitHubUserClient(c.config)
	c.Person = NewPersonClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.Gremlin:
		u, err := url.Parse(dataSourceName)
		if err != nil {
			return nil, err
		}
		c, err := gremlin.NewClient(gremlin.Config{
			Endpoint: gremlin.Endpoint{
				URL: u,
			},
		})
		if err != nil {
			return nil, err
		}
		drv := gremlin.NewDriver(c)
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Cluster:     NewClusterClient(cfg),
		GitHubIssue: NewGitHubIssueClient(cfg),
		GitHubUser:  NewGitHubUserClient(cfg),
		Person:      NewPersonClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Cluster.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Cluster.Use(hooks...)
	c.GitHubIssue.Use(hooks...)
	c.GitHubUser.Use(hooks...)
	c.Person.Use(hooks...)
}

// ClusterClient is a client for the Cluster schema.
type ClusterClient struct {
	config
}

// NewClusterClient returns a client for the Cluster from the given config.
func NewClusterClient(c config) *ClusterClient {
	return &ClusterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cluster.Hooks(f(g(h())))`.
func (c *ClusterClient) Use(hooks ...Hook) {
	c.hooks.Cluster = append(c.hooks.Cluster, hooks...)
}

// Create returns a create builder for Cluster.
func (c *ClusterClient) Create() *ClusterCreate {
	mutation := newClusterMutation(c.config, OpCreate)
	return &ClusterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cluster entities.
func (c *ClusterClient) CreateBulk(builders ...*ClusterCreate) *ClusterCreateBulk {
	return &ClusterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cluster.
func (c *ClusterClient) Update() *ClusterUpdate {
	mutation := newClusterMutation(c.config, OpUpdate)
	return &ClusterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClusterClient) UpdateOne(cl *Cluster) *ClusterUpdateOne {
	mutation := newClusterMutation(c.config, OpUpdateOne, withCluster(cl))
	return &ClusterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClusterClient) UpdateOneID(id int) *ClusterUpdateOne {
	mutation := newClusterMutation(c.config, OpUpdateOne, withClusterID(id))
	return &ClusterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cluster.
func (c *ClusterClient) Delete() *ClusterDelete {
	mutation := newClusterMutation(c.config, OpDelete)
	return &ClusterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ClusterClient) DeleteOne(cl *Cluster) *ClusterDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ClusterClient) DeleteOneID(id int) *ClusterDeleteOne {
	builder := c.Delete().Where(cluster.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClusterDeleteOne{builder}
}

// Query returns a query builder for Cluster.
func (c *ClusterClient) Query() *ClusterQuery {
	return &ClusterQuery{
		config: c.config,
	}
}

// Get returns a Cluster entity by its id.
func (c *ClusterClient) Get(ctx context.Context, id int) (*Cluster, error) {
	return c.Query().Where(cluster.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClusterClient) GetX(ctx context.Context, id int) *Cluster {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ClusterClient) Hooks() []Hook {
	return c.hooks.Cluster
}

// GitHubIssueClient is a client for the GitHubIssue schema.
type GitHubIssueClient struct {
	config
}

// NewGitHubIssueClient returns a client for the GitHubIssue from the given config.
func NewGitHubIssueClient(c config) *GitHubIssueClient {
	return &GitHubIssueClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `githubissue.Hooks(f(g(h())))`.
func (c *GitHubIssueClient) Use(hooks ...Hook) {
	c.hooks.GitHubIssue = append(c.hooks.GitHubIssue, hooks...)
}

// Create returns a create builder for GitHubIssue.
func (c *GitHubIssueClient) Create() *GitHubIssueCreate {
	mutation := newGitHubIssueMutation(c.config, OpCreate)
	return &GitHubIssueCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GitHubIssue entities.
func (c *GitHubIssueClient) CreateBulk(builders ...*GitHubIssueCreate) *GitHubIssueCreateBulk {
	return &GitHubIssueCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GitHubIssue.
func (c *GitHubIssueClient) Update() *GitHubIssueUpdate {
	mutation := newGitHubIssueMutation(c.config, OpUpdate)
	return &GitHubIssueUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GitHubIssueClient) UpdateOne(ghi *GitHubIssue) *GitHubIssueUpdateOne {
	mutation := newGitHubIssueMutation(c.config, OpUpdateOne, withGitHubIssue(ghi))
	return &GitHubIssueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GitHubIssueClient) UpdateOneID(id int) *GitHubIssueUpdateOne {
	mutation := newGitHubIssueMutation(c.config, OpUpdateOne, withGitHubIssueID(id))
	return &GitHubIssueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GitHubIssue.
func (c *GitHubIssueClient) Delete() *GitHubIssueDelete {
	mutation := newGitHubIssueMutation(c.config, OpDelete)
	return &GitHubIssueDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GitHubIssueClient) DeleteOne(ghi *GitHubIssue) *GitHubIssueDeleteOne {
	return c.DeleteOneID(ghi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GitHubIssueClient) DeleteOneID(id int) *GitHubIssueDeleteOne {
	builder := c.Delete().Where(githubissue.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GitHubIssueDeleteOne{builder}
}

// Query returns a query builder for GitHubIssue.
func (c *GitHubIssueClient) Query() *GitHubIssueQuery {
	return &GitHubIssueQuery{
		config: c.config,
	}
}

// Get returns a GitHubIssue entity by its id.
func (c *GitHubIssueClient) Get(ctx context.Context, id int) (*GitHubIssue, error) {
	return c.Query().Where(githubissue.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GitHubIssueClient) GetX(ctx context.Context, id int) *GitHubIssue {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GitHubIssueClient) Hooks() []Hook {
	return c.hooks.GitHubIssue
}

// GitHubUserClient is a client for the GitHubUser schema.
type GitHubUserClient struct {
	config
}

// NewGitHubUserClient returns a client for the GitHubUser from the given config.
func NewGitHubUserClient(c config) *GitHubUserClient {
	return &GitHubUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `githubuser.Hooks(f(g(h())))`.
func (c *GitHubUserClient) Use(hooks ...Hook) {
	c.hooks.GitHubUser = append(c.hooks.GitHubUser, hooks...)
}

// Create returns a create builder for GitHubUser.
func (c *GitHubUserClient) Create() *GitHubUserCreate {
	mutation := newGitHubUserMutation(c.config, OpCreate)
	return &GitHubUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GitHubUser entities.
func (c *GitHubUserClient) CreateBulk(builders ...*GitHubUserCreate) *GitHubUserCreateBulk {
	return &GitHubUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GitHubUser.
func (c *GitHubUserClient) Update() *GitHubUserUpdate {
	mutation := newGitHubUserMutation(c.config, OpUpdate)
	return &GitHubUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GitHubUserClient) UpdateOne(ghu *GitHubUser) *GitHubUserUpdateOne {
	mutation := newGitHubUserMutation(c.config, OpUpdateOne, withGitHubUser(ghu))
	return &GitHubUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GitHubUserClient) UpdateOneID(id int) *GitHubUserUpdateOne {
	mutation := newGitHubUserMutation(c.config, OpUpdateOne, withGitHubUserID(id))
	return &GitHubUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GitHubUser.
func (c *GitHubUserClient) Delete() *GitHubUserDelete {
	mutation := newGitHubUserMutation(c.config, OpDelete)
	return &GitHubUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GitHubUserClient) DeleteOne(ghu *GitHubUser) *GitHubUserDeleteOne {
	return c.DeleteOneID(ghu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GitHubUserClient) DeleteOneID(id int) *GitHubUserDeleteOne {
	builder := c.Delete().Where(githubuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GitHubUserDeleteOne{builder}
}

// Query returns a query builder for GitHubUser.
func (c *GitHubUserClient) Query() *GitHubUserQuery {
	return &GitHubUserQuery{
		config: c.config,
	}
}

// Get returns a GitHubUser entity by its id.
func (c *GitHubUserClient) Get(ctx context.Context, id int) (*GitHubUser, error) {
	return c.Query().Where(githubuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GitHubUserClient) GetX(ctx context.Context, id int) *GitHubUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GitHubUserClient) Hooks() []Hook {
	return c.hooks.GitHubUser
}

// PersonClient is a client for the Person schema.
type PersonClient struct {
	config
}

// NewPersonClient returns a client for the Person from the given config.
func NewPersonClient(c config) *PersonClient {
	return &PersonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `person.Hooks(f(g(h())))`.
func (c *PersonClient) Use(hooks ...Hook) {
	c.hooks.Person = append(c.hooks.Person, hooks...)
}

// Create returns a create builder for Person.
func (c *PersonClient) Create() *PersonCreate {
	mutation := newPersonMutation(c.config, OpCreate)
	return &PersonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Person entities.
func (c *PersonClient) CreateBulk(builders ...*PersonCreate) *PersonCreateBulk {
	return &PersonCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Person.
func (c *PersonClient) Update() *PersonUpdate {
	mutation := newPersonMutation(c.config, OpUpdate)
	return &PersonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonClient) UpdateOne(pe *Person) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPerson(pe))
	return &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PersonClient) UpdateOneID(id int) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPersonID(id))
	return &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Person.
func (c *PersonClient) Delete() *PersonDelete {
	mutation := newPersonMutation(c.config, OpDelete)
	return &PersonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PersonClient) DeleteOne(pe *Person) *PersonDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PersonClient) DeleteOneID(id int) *PersonDeleteOne {
	builder := c.Delete().Where(person.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PersonDeleteOne{builder}
}

// Query returns a query builder for Person.
func (c *PersonClient) Query() *PersonQuery {
	return &PersonQuery{
		config: c.config,
	}
}

// Get returns a Person entity by its id.
func (c *PersonClient) Get(ctx context.Context, id int) (*Person, error) {
	return c.Query().Where(person.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PersonClient) GetX(ctx context.Context, id int) *Person {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGitHubAccount queries the gitHubAccount edge of a Person.
func (c *PersonClient) QueryGitHubAccount(pe *Person) *GitHubUserQuery {
	query := &GitHubUserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *dsl.Traversal, _ error) {

		fromV = g.V(pe.ID).OutE(person.GitHubAccountLabel).InV()
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PersonClient) Hooks() []Hook {
	return c.hooks.Person
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/gremlin"
)

// GitHubUser is the model entity for the GitHubUser schema.
type GitHubUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Login holds the value of the "login" field.
	Login string `json:"login,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
}

// FromResponse scans the gremlin response data into GitHubUser.
func (ghu *GitHubUser) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanghu struct {
		ID    int    `json:"id,omitempty"`
		Login string `json:"login,omitempty"`
		Email string `json:"email,omitempty"`
		Name  string `json:"name,omitempty"`
	}
	if err := vmap.Decode(&scanghu); err != nil {
		return err
	}
	ghu.ID = scanghu.ID
	ghu.Login = scanghu.Login
	ghu.Email = scanghu.Email
	ghu.Name = scanghu.Name
	return nil
}

// Update returns a builder for updating this GitHubUser.
// Note that you need to call GitHubUser.Unwrap() before calling this method if this GitHubUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (ghu *GitHubUser) Update() *GitHubUserUpdateOne {
	return (&GitHubUserClient{config: ghu.config}).UpdateOne(ghu)
}

// Unwrap unwraps the GitHubUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ghu *GitHubUser) Unwrap() *GitHubUser {
	tx, ok := ghu.config.driver.(*txDriver)
	if !ok {
		panic("ent: GitHubUser is not a transactional entity")
	}
	ghu.config.driver = tx.drv
	return ghu
}

// String implements the fmt.Stringer.
func (ghu *GitHubUser) String() string {
	var builder strings.Builder
	builder.WriteString("GitHubUser(")
	builder.WriteString(fmt.Sprintf("id=%v", ghu.ID))
	builder.WriteString(", login=")
	builder.WriteString(ghu.Login)
	builder.WriteString(", email=")
	builder.WriteString(ghu.Email)
	builder.WriteString(", name=")
	builder.WriteString(ghu.Name)
	builder.WriteByte(')')
	return builder.String()
}

// GitHubUsers is a parsable slice of GitHubUser.
type GitHubUsers []*GitHubUser

// FromResponse scans the gremlin response data into GitHubUsers.
func (ghu *GitHubUsers) FromResponse(res *gremlin.Response) error {
	vmap, err := res.ReadValueMap()
	if err != nil {
		return err
	}
	var scanghu []struct {
		ID    int    `json:"id,omitempty"`
		Login string `json:"login,omitempty"`
		Email string `json:"email,omitempty"`
		Name  string `json:"name,omitempty"`
	}
	if err := vmap.Decode(&scanghu); err != nil {
		return err
	}
	for _, v := range scanghu {
		*ghu = append(*ghu, &GitHubUser{
			ID:    v.ID,
			Login: v.Login,
			Email: v.Email,
			Name:  v.Name,
		})
	}
	return nil
}

func (ghu GitHubUsers) config(cfg config) {
	for _i := range ghu {
		ghu[_i].config = cfg
	}
}

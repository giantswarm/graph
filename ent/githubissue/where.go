// Code generated by entc, DO NOT EDIT.

package githubissue

import (
	"entgo.io/ent/dialect/gremlin/graph/dsl"
	"entgo.io/ent/dialect/gremlin/graph/dsl/__"
	"entgo.io/ent/dialect/gremlin/graph/dsl/p"
	"github.com/giantswarm/graph/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.HasID(id)
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.HasID(p.EQ(id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.HasID(p.NEQ(id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		t.HasID(p.Within(v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		t.HasID(p.Without(v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.HasID(p.GT(id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.HasID(p.GTE(id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.HasID(p.LT(id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.HasID(p.LTE(id))
	})
}

// GithubID applies equality check predicate on the "github_id" field. It's identical to GithubIDEQ.
func GithubID(v int) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldGithubID, p.EQ(v))
	})
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v int) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldNumber, p.EQ(v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldTitle, p.EQ(v))
	})
}

// Body applies equality check predicate on the "body" field. It's identical to BodyEQ.
func Body(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldBody, p.EQ(v))
	})
}

// HTMLURL applies equality check predicate on the "html_url" field. It's identical to HTMLURLEQ.
func HTMLURL(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldHTMLURL, p.EQ(v))
	})
}

// Locked applies equality check predicate on the "locked" field. It's identical to LockedEQ.
func Locked(v bool) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldLocked, p.EQ(v))
	})
}

// ActiveLockReason applies equality check predicate on the "active_lock_reason" field. It's identical to ActiveLockReasonEQ.
func ActiveLockReason(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldActiveLockReason, p.EQ(v))
	})
}

// CommentsCount applies equality check predicate on the "comments_count" field. It's identical to CommentsCountEQ.
func CommentsCount(v int) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldCommentsCount, p.EQ(v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldCreatedAt, p.EQ(v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldUpdatedAt, p.EQ(v))
	})
}

// ClosedAt applies equality check predicate on the "closed_at" field. It's identical to ClosedAtEQ.
func ClosedAt(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldClosedAt, p.EQ(v))
	})
}

// AuthorAssociation applies equality check predicate on the "author_association" field. It's identical to AuthorAssociationEQ.
func AuthorAssociation(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldAuthorAssociation, p.EQ(v))
	})
}

// GithubIDEQ applies the EQ predicate on the "github_id" field.
func GithubIDEQ(v int) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldGithubID, p.EQ(v))
	})
}

// GithubIDNEQ applies the NEQ predicate on the "github_id" field.
func GithubIDNEQ(v int) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldGithubID, p.NEQ(v))
	})
}

// GithubIDIn applies the In predicate on the "github_id" field.
func GithubIDIn(vs ...int) predicate.GitHubIssue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldGithubID, p.Within(v...))
	})
}

// GithubIDNotIn applies the NotIn predicate on the "github_id" field.
func GithubIDNotIn(vs ...int) predicate.GitHubIssue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldGithubID, p.Without(v...))
	})
}

// GithubIDGT applies the GT predicate on the "github_id" field.
func GithubIDGT(v int) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldGithubID, p.GT(v))
	})
}

// GithubIDGTE applies the GTE predicate on the "github_id" field.
func GithubIDGTE(v int) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldGithubID, p.GTE(v))
	})
}

// GithubIDLT applies the LT predicate on the "github_id" field.
func GithubIDLT(v int) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldGithubID, p.LT(v))
	})
}

// GithubIDLTE applies the LTE predicate on the "github_id" field.
func GithubIDLTE(v int) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldGithubID, p.LTE(v))
	})
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v int) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldNumber, p.EQ(v))
	})
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v int) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldNumber, p.NEQ(v))
	})
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...int) predicate.GitHubIssue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldNumber, p.Within(v...))
	})
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...int) predicate.GitHubIssue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldNumber, p.Without(v...))
	})
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v int) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldNumber, p.GT(v))
	})
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v int) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldNumber, p.GTE(v))
	})
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v int) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldNumber, p.LT(v))
	})
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v int) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldNumber, p.LTE(v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldTitle, p.EQ(v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldTitle, p.NEQ(v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.GitHubIssue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldTitle, p.Within(v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.GitHubIssue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldTitle, p.Without(v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldTitle, p.GT(v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldTitle, p.GTE(v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldTitle, p.LT(v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldTitle, p.LTE(v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldTitle, p.Containing(v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldTitle, p.StartingWith(v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldTitle, p.EndingWith(v))
	})
}

// BodyEQ applies the EQ predicate on the "body" field.
func BodyEQ(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldBody, p.EQ(v))
	})
}

// BodyNEQ applies the NEQ predicate on the "body" field.
func BodyNEQ(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldBody, p.NEQ(v))
	})
}

// BodyIn applies the In predicate on the "body" field.
func BodyIn(vs ...string) predicate.GitHubIssue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldBody, p.Within(v...))
	})
}

// BodyNotIn applies the NotIn predicate on the "body" field.
func BodyNotIn(vs ...string) predicate.GitHubIssue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldBody, p.Without(v...))
	})
}

// BodyGT applies the GT predicate on the "body" field.
func BodyGT(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldBody, p.GT(v))
	})
}

// BodyGTE applies the GTE predicate on the "body" field.
func BodyGTE(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldBody, p.GTE(v))
	})
}

// BodyLT applies the LT predicate on the "body" field.
func BodyLT(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldBody, p.LT(v))
	})
}

// BodyLTE applies the LTE predicate on the "body" field.
func BodyLTE(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldBody, p.LTE(v))
	})
}

// BodyContains applies the Contains predicate on the "body" field.
func BodyContains(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldBody, p.Containing(v))
	})
}

// BodyHasPrefix applies the HasPrefix predicate on the "body" field.
func BodyHasPrefix(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldBody, p.StartingWith(v))
	})
}

// BodyHasSuffix applies the HasSuffix predicate on the "body" field.
func BodyHasSuffix(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldBody, p.EndingWith(v))
	})
}

// HTMLURLEQ applies the EQ predicate on the "html_url" field.
func HTMLURLEQ(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldHTMLURL, p.EQ(v))
	})
}

// HTMLURLNEQ applies the NEQ predicate on the "html_url" field.
func HTMLURLNEQ(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldHTMLURL, p.NEQ(v))
	})
}

// HTMLURLIn applies the In predicate on the "html_url" field.
func HTMLURLIn(vs ...string) predicate.GitHubIssue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldHTMLURL, p.Within(v...))
	})
}

// HTMLURLNotIn applies the NotIn predicate on the "html_url" field.
func HTMLURLNotIn(vs ...string) predicate.GitHubIssue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldHTMLURL, p.Without(v...))
	})
}

// HTMLURLGT applies the GT predicate on the "html_url" field.
func HTMLURLGT(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldHTMLURL, p.GT(v))
	})
}

// HTMLURLGTE applies the GTE predicate on the "html_url" field.
func HTMLURLGTE(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldHTMLURL, p.GTE(v))
	})
}

// HTMLURLLT applies the LT predicate on the "html_url" field.
func HTMLURLLT(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldHTMLURL, p.LT(v))
	})
}

// HTMLURLLTE applies the LTE predicate on the "html_url" field.
func HTMLURLLTE(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldHTMLURL, p.LTE(v))
	})
}

// HTMLURLContains applies the Contains predicate on the "html_url" field.
func HTMLURLContains(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldHTMLURL, p.Containing(v))
	})
}

// HTMLURLHasPrefix applies the HasPrefix predicate on the "html_url" field.
func HTMLURLHasPrefix(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldHTMLURL, p.StartingWith(v))
	})
}

// HTMLURLHasSuffix applies the HasSuffix predicate on the "html_url" field.
func HTMLURLHasSuffix(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldHTMLURL, p.EndingWith(v))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v State) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldState, p.EQ(v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v State) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldState, p.NEQ(v))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...State) predicate.GitHubIssue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldState, p.Within(v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...State) predicate.GitHubIssue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldState, p.Without(v...))
	})
}

// LockedEQ applies the EQ predicate on the "locked" field.
func LockedEQ(v bool) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldLocked, p.EQ(v))
	})
}

// LockedNEQ applies the NEQ predicate on the "locked" field.
func LockedNEQ(v bool) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldLocked, p.NEQ(v))
	})
}

// ActiveLockReasonEQ applies the EQ predicate on the "active_lock_reason" field.
func ActiveLockReasonEQ(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldActiveLockReason, p.EQ(v))
	})
}

// ActiveLockReasonNEQ applies the NEQ predicate on the "active_lock_reason" field.
func ActiveLockReasonNEQ(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldActiveLockReason, p.NEQ(v))
	})
}

// ActiveLockReasonIn applies the In predicate on the "active_lock_reason" field.
func ActiveLockReasonIn(vs ...string) predicate.GitHubIssue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldActiveLockReason, p.Within(v...))
	})
}

// ActiveLockReasonNotIn applies the NotIn predicate on the "active_lock_reason" field.
func ActiveLockReasonNotIn(vs ...string) predicate.GitHubIssue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldActiveLockReason, p.Without(v...))
	})
}

// ActiveLockReasonGT applies the GT predicate on the "active_lock_reason" field.
func ActiveLockReasonGT(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldActiveLockReason, p.GT(v))
	})
}

// ActiveLockReasonGTE applies the GTE predicate on the "active_lock_reason" field.
func ActiveLockReasonGTE(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldActiveLockReason, p.GTE(v))
	})
}

// ActiveLockReasonLT applies the LT predicate on the "active_lock_reason" field.
func ActiveLockReasonLT(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldActiveLockReason, p.LT(v))
	})
}

// ActiveLockReasonLTE applies the LTE predicate on the "active_lock_reason" field.
func ActiveLockReasonLTE(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldActiveLockReason, p.LTE(v))
	})
}

// ActiveLockReasonContains applies the Contains predicate on the "active_lock_reason" field.
func ActiveLockReasonContains(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldActiveLockReason, p.Containing(v))
	})
}

// ActiveLockReasonHasPrefix applies the HasPrefix predicate on the "active_lock_reason" field.
func ActiveLockReasonHasPrefix(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldActiveLockReason, p.StartingWith(v))
	})
}

// ActiveLockReasonHasSuffix applies the HasSuffix predicate on the "active_lock_reason" field.
func ActiveLockReasonHasSuffix(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldActiveLockReason, p.EndingWith(v))
	})
}

// CommentsCountEQ applies the EQ predicate on the "comments_count" field.
func CommentsCountEQ(v int) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldCommentsCount, p.EQ(v))
	})
}

// CommentsCountNEQ applies the NEQ predicate on the "comments_count" field.
func CommentsCountNEQ(v int) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldCommentsCount, p.NEQ(v))
	})
}

// CommentsCountIn applies the In predicate on the "comments_count" field.
func CommentsCountIn(vs ...int) predicate.GitHubIssue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldCommentsCount, p.Within(v...))
	})
}

// CommentsCountNotIn applies the NotIn predicate on the "comments_count" field.
func CommentsCountNotIn(vs ...int) predicate.GitHubIssue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldCommentsCount, p.Without(v...))
	})
}

// CommentsCountGT applies the GT predicate on the "comments_count" field.
func CommentsCountGT(v int) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldCommentsCount, p.GT(v))
	})
}

// CommentsCountGTE applies the GTE predicate on the "comments_count" field.
func CommentsCountGTE(v int) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldCommentsCount, p.GTE(v))
	})
}

// CommentsCountLT applies the LT predicate on the "comments_count" field.
func CommentsCountLT(v int) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldCommentsCount, p.LT(v))
	})
}

// CommentsCountLTE applies the LTE predicate on the "comments_count" field.
func CommentsCountLTE(v int) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldCommentsCount, p.LTE(v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldCreatedAt, p.EQ(v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldCreatedAt, p.NEQ(v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...string) predicate.GitHubIssue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldCreatedAt, p.Within(v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...string) predicate.GitHubIssue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldCreatedAt, p.Without(v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldCreatedAt, p.GT(v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldCreatedAt, p.GTE(v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldCreatedAt, p.LT(v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldCreatedAt, p.LTE(v))
	})
}

// CreatedAtContains applies the Contains predicate on the "created_at" field.
func CreatedAtContains(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldCreatedAt, p.Containing(v))
	})
}

// CreatedAtHasPrefix applies the HasPrefix predicate on the "created_at" field.
func CreatedAtHasPrefix(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldCreatedAt, p.StartingWith(v))
	})
}

// CreatedAtHasSuffix applies the HasSuffix predicate on the "created_at" field.
func CreatedAtHasSuffix(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldCreatedAt, p.EndingWith(v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldUpdatedAt, p.EQ(v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldUpdatedAt, p.NEQ(v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...string) predicate.GitHubIssue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldUpdatedAt, p.Within(v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...string) predicate.GitHubIssue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldUpdatedAt, p.Without(v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldUpdatedAt, p.GT(v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldUpdatedAt, p.GTE(v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldUpdatedAt, p.LT(v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldUpdatedAt, p.LTE(v))
	})
}

// UpdatedAtContains applies the Contains predicate on the "updated_at" field.
func UpdatedAtContains(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldUpdatedAt, p.Containing(v))
	})
}

// UpdatedAtHasPrefix applies the HasPrefix predicate on the "updated_at" field.
func UpdatedAtHasPrefix(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldUpdatedAt, p.StartingWith(v))
	})
}

// UpdatedAtHasSuffix applies the HasSuffix predicate on the "updated_at" field.
func UpdatedAtHasSuffix(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldUpdatedAt, p.EndingWith(v))
	})
}

// ClosedAtEQ applies the EQ predicate on the "closed_at" field.
func ClosedAtEQ(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldClosedAt, p.EQ(v))
	})
}

// ClosedAtNEQ applies the NEQ predicate on the "closed_at" field.
func ClosedAtNEQ(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldClosedAt, p.NEQ(v))
	})
}

// ClosedAtIn applies the In predicate on the "closed_at" field.
func ClosedAtIn(vs ...string) predicate.GitHubIssue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldClosedAt, p.Within(v...))
	})
}

// ClosedAtNotIn applies the NotIn predicate on the "closed_at" field.
func ClosedAtNotIn(vs ...string) predicate.GitHubIssue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldClosedAt, p.Without(v...))
	})
}

// ClosedAtGT applies the GT predicate on the "closed_at" field.
func ClosedAtGT(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldClosedAt, p.GT(v))
	})
}

// ClosedAtGTE applies the GTE predicate on the "closed_at" field.
func ClosedAtGTE(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldClosedAt, p.GTE(v))
	})
}

// ClosedAtLT applies the LT predicate on the "closed_at" field.
func ClosedAtLT(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldClosedAt, p.LT(v))
	})
}

// ClosedAtLTE applies the LTE predicate on the "closed_at" field.
func ClosedAtLTE(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldClosedAt, p.LTE(v))
	})
}

// ClosedAtContains applies the Contains predicate on the "closed_at" field.
func ClosedAtContains(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldClosedAt, p.Containing(v))
	})
}

// ClosedAtHasPrefix applies the HasPrefix predicate on the "closed_at" field.
func ClosedAtHasPrefix(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldClosedAt, p.StartingWith(v))
	})
}

// ClosedAtHasSuffix applies the HasSuffix predicate on the "closed_at" field.
func ClosedAtHasSuffix(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldClosedAt, p.EndingWith(v))
	})
}

// AuthorAssociationEQ applies the EQ predicate on the "author_association" field.
func AuthorAssociationEQ(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldAuthorAssociation, p.EQ(v))
	})
}

// AuthorAssociationNEQ applies the NEQ predicate on the "author_association" field.
func AuthorAssociationNEQ(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldAuthorAssociation, p.NEQ(v))
	})
}

// AuthorAssociationIn applies the In predicate on the "author_association" field.
func AuthorAssociationIn(vs ...string) predicate.GitHubIssue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldAuthorAssociation, p.Within(v...))
	})
}

// AuthorAssociationNotIn applies the NotIn predicate on the "author_association" field.
func AuthorAssociationNotIn(vs ...string) predicate.GitHubIssue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldAuthorAssociation, p.Without(v...))
	})
}

// AuthorAssociationGT applies the GT predicate on the "author_association" field.
func AuthorAssociationGT(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldAuthorAssociation, p.GT(v))
	})
}

// AuthorAssociationGTE applies the GTE predicate on the "author_association" field.
func AuthorAssociationGTE(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldAuthorAssociation, p.GTE(v))
	})
}

// AuthorAssociationLT applies the LT predicate on the "author_association" field.
func AuthorAssociationLT(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldAuthorAssociation, p.LT(v))
	})
}

// AuthorAssociationLTE applies the LTE predicate on the "author_association" field.
func AuthorAssociationLTE(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldAuthorAssociation, p.LTE(v))
	})
}

// AuthorAssociationContains applies the Contains predicate on the "author_association" field.
func AuthorAssociationContains(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldAuthorAssociation, p.Containing(v))
	})
}

// AuthorAssociationHasPrefix applies the HasPrefix predicate on the "author_association" field.
func AuthorAssociationHasPrefix(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldAuthorAssociation, p.StartingWith(v))
	})
}

// AuthorAssociationHasSuffix applies the HasSuffix predicate on the "author_association" field.
func AuthorAssociationHasSuffix(v string) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.Has(Label, FieldAuthorAssociation, p.EndingWith(v))
	})
}

// HasAssignees applies the HasEdge predicate on the "assignees" edge.
func HasAssignees() predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.OutE(AssigneesLabel).OutV()
	})
}

// HasAssigneesWith applies the HasEdge predicate on the "assignees" edge with a given conditions (other predicates).
func HasAssigneesWith(preds ...predicate.GitHubUser) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		tr := __.InV()
		for _, p := range preds {
			p(tr)
		}
		t.OutE(AssigneesLabel).Where(tr).OutV()
	})
}

// HasAuthor applies the HasEdge predicate on the "author" edge.
func HasAuthor() predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.InE(AuthorInverseLabel).InV()
	})
}

// HasAuthorWith applies the HasEdge predicate on the "author" edge with a given conditions (other predicates).
func HasAuthorWith(preds ...predicate.GitHubUser) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		tr := __.OutV()
		for _, p := range preds {
			p(tr)
		}
		t.InE(AuthorInverseLabel).Where(tr).InV()
	})
}

// HasClosedBy applies the HasEdge predicate on the "closed_by" edge.
func HasClosedBy() predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		t.InE(ClosedByInverseLabel).InV()
	})
}

// HasClosedByWith applies the HasEdge predicate on the "closed_by" edge with a given conditions (other predicates).
func HasClosedByWith(preds ...predicate.GitHubUser) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(t *dsl.Traversal) {
		tr := __.OutV()
		for _, p := range preds {
			p(tr)
		}
		t.InE(ClosedByInverseLabel).Where(tr).InV()
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GitHubIssue) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(tr *dsl.Traversal) {
		trs := make([]interface{}, 0, len(predicates))
		for _, p := range predicates {
			t := __.New()
			p(t)
			trs = append(trs, t)
		}
		tr.Where(__.And(trs...))
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GitHubIssue) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(tr *dsl.Traversal) {
		trs := make([]interface{}, 0, len(predicates))
		for _, p := range predicates {
			t := __.New()
			p(t)
			trs = append(trs, t)
		}
		tr.Where(__.Or(trs...))
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GitHubIssue) predicate.GitHubIssue {
	return predicate.GitHubIssue(func(tr *dsl.Traversal) {
		t := __.New()
		p(t)
		tr.Where(__.Not(t))
	})
}
